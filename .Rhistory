# Forecast next 12 months
fcast_arima <- forecast(fit_arima, h = 100)
class(fcast_arima)
# Check if object has timetk index
has_timetk_idx(fcast_arima)
# sw_sweep - tidies forecast output
fcast_tbl <- sw_sweep(fcast_arima, timetk_idx = TRUE)
fcast_tbl
# Visualize the forecast with ggplot
fcast_tbl %>%
ggplot(aes(x = index, y = SUM, color = key)) +
# 95% CI
geom_ribbon(aes(ymin = lo.95, ymax = hi.95),
fill = "#D5DBFF", color = NA, size = 0) +
# 80% CI
geom_ribbon(aes(ymin = lo.80, ymax = hi.80, fill = key),
fill = "#596DD5", color = NA, size = 0, alpha = 0.8)+
# Prediction
geom_line() +
geom_point() +
# Actuals
geom_line(aes(x = Index, y = SUM), color = palette_light()[[1]], data = actuals_tbl) +
geom_point(aes(x = Index, y = SUM), color = palette_light()[[1]], data = actuals_tbl)+
# Aesthetics
labs(title = "Beer Sales Forecast: ARIMA", x = "", y = "Thousands of Tons",
subtitle = "sw_sweep tidies the auto.arima() forecast output") +
scale_color_tq() +
scale_fill_tq() #+
#theme_tq()
rror_tbl <- left_join(actuals_tbl, fcast_tbl, by = c("Index" = "index"))%>%
rename(actual = SUM.x, pred = SUM.y) %>%
select(Index, actual, pred) %>%
mutate(
error     = actual - pred,
error_pct = error / actual
)
output$table62<-DT:renderDataTable({
error_tbl
})
error_tbl
na.omit(error_tbl)
# Calculate test error metrics
test_residuals <- error_tbl$error
test_error_pct <- error_tbl$error_pct * 100 # Percentage error
me   <- mean(test_residuals, na.rm=TRUE)
rmse <- mean(test_residuals^2, na.rm=TRUE)^0.5
mae  <- mean(abs(test_residuals), na.rm=TRUE)
mape <- mean(abs(test_error_pct), na.rm=TRUE)
mpe  <- mean(test_error_pct, na.rm=TRUE)
tibble(me, rmse, mae, mape, mpe) %>% glimpse()
}
#====================================timetk + h2o: MAPE = 3.9% (This demo)==================================
#beer_sales_tbl <- tq_get("S4248SM144NCEN", get = "economic.data", from = "2010-01-01", to = "2017-10-27")
SUM_DATA <- pac[,c(1,31)]
#browser()
#message(MyChannel)
#SUM_DATA <- pac[,c(1,grep(paste0(MyChannel), colnames(pac)))]
SUM_DATA %>% glimpse()
beer_sales_tbl_aug <- SUM_DATA %>%
tk_augment_timeseries_signature()
beer_sales_tbl_aug %>% glimpse()
beer_sales_tbl_clean <- beer_sales_tbl_aug %>%
select_if(~ !is.POSIXct(.)) %>%
select_if(~ !any(is.na(.))) %>%
mutate_if(is.ordered, ~ as.character(.) %>% as.factor)
beer_sales_tbl_clean %>% glimpse()
#beer_sales_tbl_clean[,1] <- as.integer(beer_sales_tbl_clean %>% select(paste0(MyChannel)) %>% unlist(use.names=FALSE))
beer_sales_tbl_clean[,1] <- as.integer(beer_sales_tbl_clean$SUM)
#beer_sales_tbl_clean$month.lbl <- NULL
#beer_sales_tbl_clean$wday.lbl <- NULL
split <- round(nrow(beer_sales_tbl_clean) * .70)
datat_to <- beer_sales_tbl_clean[1:split,]
actuals_tbl <- beer_sales_tbl_clean[(split + 1):nrow(beer_sales_tbl_clean),]
split2 <- round(nrow(actuals_tbl) * .66)
data_beet <- actuals_tbl[1:split2,]
data_end <- actuals_tbl[(split2 + 1):nrow(actuals_tbl),]
train_tbl <- datat_to
valid_tbl <- data_beet
test_tbl  <- data_end
h2o.init()
h2o.no_progress()
train_h2o <- as.h2o(train_tbl)
valid_h2o <- as.h2o(valid_tbl)
test_h2o  <- as.h2o(test_tbl)
#y <- MyChannel
y<- "SUM"
x <- setdiff(names(train_h2o), y)
# linear regression model used, but can use any model
automl_models_h2o <- h2o.automl(
x = x,
y = y,
training_frame = train_h2o,
validation_frame = valid_h2o,
leaderboard_frame = test_h2o,
max_runtime_secs = 60,
stopping_metric = "deviance")
automl_leader <- automl_models_h2o@leader
pred_h2o <- h2o.predict(automl_leader, newdata = test_h2o)
h2o.performance(automl_leader, newdata = test_h2o)
error_tbl <- SUM_DATA %>%
tail(SUM_DATA,n=sum(nrow(data_end)))%>%
add_column(pred = pred_h2o %>% as.tibble() %>% pull(predict)) %>%
rename(actual = SUM) %>%
mutate(
error     = actual - pred,
error_pct = error / actual
)
error_tbl
#error table to output in linear reg table 62
output$table62<-DT:renderDataTable(error_tbl %>%
summarise(
me   = mean(error),
rmse = mean(error^2)^0.5,
mae  = mean(abs(error)),
mape = mean(abs(error_pct)),
mpe  = mean(error_pct)
) %>%
glimpse()
)
p<-SUM_DATA %>%
ggplot(aes(x = Index, y = SUM)) +
# Data - Spooky Orange
geom_point(size = 2, color = "gray", alpha = 0.5, shape = 21, fill = "orange") +
geom_line(color = "orange", size = 0.5) +
geom_ma(n = 1, color = "black")+
# Predictions - Spooky Purple
geom_point(aes(y = pred), size = 2, color = "gray", alpha = 1, shape = 21, fill = "purple", data = error_tbl) +
geom_line(aes(y = pred), color = "purple", size = 0.5, data = error_tbl) +
# Aesthetics
labs(
title = "Graf",
subtitle = "Algotimus H2O mal najvyššiu prestnosť MAPE:9,6%"
)
ggplotly(p)
output$plot61<-renderPlotly({
plot_ly(SUM_DATA, x = ~Index, y = ~SUM)%>%
add_trace(colors = "orange",name = "Početnosť áut v čase",mode = "lines")%>%
add_trace(y = ~pred, colors = "gray",name = "Predikované hodnoty", mode = "lines+markers", alpha = 1,data = error_tbl)%>%
layout(title = "Graf",
xaxis = list(title = "Čas",
rangeslider = list(type = "date")),
yaxis = list(title = "Početnosť áut"))
})
runApp()
runApp()
View(dipu.pac_data)
shiny::runApp()
runApp()
runApp()
runApp()
runApp(port=8888)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
View(dipu.pac_data)
data1<-dipu.pre_data
message(dipu.pac_data)
dipu.pac_data
head(data1)
runApp()
pac<-function.MyAggregation(dipu.fil_data,"hours")
pac<-function.MyAggregation(dipu.fil_data,"hour")
pac<-function.MyAggregation(dipu.fil_data,"hour")
pac<-function.MyAggregation(dipu.fil_data,"minutes")
pac<-function.MyAggregation(dipu.fil_data,"minutes")
pac<-function.MyAggregation(dipu.fil_data,"minute")
pac<-function.MyAggregation(dipu.fil_data,"minute")
pac<-function.MyAggregation(dipu.fil_data,"minutes")
pac<-function.MyAggregation(dipu.fil_data,"year")
pac<-function.MyAggregation(dipu.fil_data,"years")
pac<-function.MyAggregation(dipu.fil_data,"years")
runApp()
runApp()
SUM_DATA <- pac[,c(1,31)]
SUM_DATA <- pac[,c(1,31)]
SUM_DATA %>% glimpse()
beer_sales_tbl_aug <- SUM_DATA %>%
tk_augment_timeseries_signature()
beer_sales_tbl_aug %>% glimpse()
beer_sales_tbl_clean <- beer_sales_tbl_aug %>%
select_if(~ !is.POSIXct(.)) %>%
select_if(~ !any(is.na(.))) %>%
mutate_if(is.ordered, ~ as.character(.) %>% as.factor)
library(DT)
library(readr)
library(plotly)
library(stringr)
library(DataLoader)
library(forecast)
library(tseries)
library(zoo)
library(xts)
library(fts)
library(MASS)
library(caret)
library(e1071)
library(dplyr)
library(h2o)        # Awesome ML Library
library(timetk)     # Toolkit for working with time series in R
library(tidyquant)
library(anomalyDetection)
library(TSMining)
library(randomForest)
#install.packages("devtools")
#devtools::install_github("twitter/AnomalyDetection")
library(AnomalyDetection)
packageVersion('plotly')
#devtools::install_github("tidyverse/ggplot2")
#devtools::install_github('hadley/ggplot2')
library(ggplot2)
## Machine Learning ##
#====================================timetk + h2o: MAPE = 3.9% (This demo)==================================
#beer_sales_tbl <- tq_get("S4248SM144NCEN", get = "economic.data", from = "2010-01-01", to = "2017-10-27")
SUM_DATA <- pac[,c(1,31)]
SUM_DATA %>% glimpse()
beer_sales_tbl_aug <- SUM_DATA %>%
tk_augment_timeseries_signature()
beer_sales_tbl_aug %>% glimpse()
beer_sales_tbl_clean <- beer_sales_tbl_aug %>%
select_if(~ !is.POSIXct(.)) %>%
select_if(~ !any(is.na(.))) %>%
mutate_if(is.ordered, ~ as.character(.) %>% as.factor)
beer_sales_tbl_clean %>% glimpse()
beer_sales_tbl_clean[,1] <- as.integer(beer_sales_tbl_clean$SUM)
#beer_sales_tbl_clean$month.lbl <- NULL
#beer_sales_tbl_clean$wday.lbl <- NULL
split <- round(nrow(beer_sales_tbl_clean) * .70)
datat_to <- beer_sales_tbl_clean[1:split,]
actuals_tbl <- beer_sales_tbl_clean[(split + 1):nrow(beer_sales_tbl_clean),]
split2 <- round(nrow(actuals_tbl) * .66)
data_beet <- actuals_tbl[1:split2,]
data_end <- actuals_tbl[(split2 + 1):nrow(actuals_tbl),]
train_tbl <- datat_to
valid_tbl <- data_beet
test_tbl  <- data_end
h2o.init()
h2o.no_progress()
train_h2o <- as.h2o(train_tbl)
valid_h2o <- as.h2o(valid_tbl)
test_h2o  <- as.h2o(test_tbl)
y <- "SUM"
x <- setdiff(names(train_h2o), y)
automl_models_h2o <- h2o.automl(
x = x,
y = y,
training_frame = train_h2o,
validation_frame = valid_h2o,
leaderboard_frame = test_h2o,
max_runtime_secs = 60,
stopping_metric = "deviance")
pac<-dipu.pac_data
SUM_DATA <- pac[,c(1,31)]
SUM_DATA %>% glimpse()
beer_sales_tbl_aug <- SUM_DATA %>%
tk_augment_timeseries_signature()
beer_sales_tbl_aug %>% glimpse()
beer_sales_tbl_clean <- beer_sales_tbl_aug %>%
select_if(~ !is.POSIXct(.)) %>%
select_if(~ !any(is.na(.))) %>%
mutate_if(is.ordered, ~ as.character(.) %>% as.factor)
beer_sales_tbl_clean %>% glimpse()
beer_sales_tbl_clean[,1] <- as.integer(beer_sales_tbl_clean$SUM)
#beer_sales_tbl_clean$month.lbl <- NULL
#beer_sales_tbl_clean$wday.lbl <- NULL
split <- round(nrow(beer_sales_tbl_clean) * .70)
datat_to <- beer_sales_tbl_clean[1:split,]
actuals_tbl <- beer_sales_tbl_clean[(split + 1):nrow(beer_sales_tbl_clean),]
split2 <- round(nrow(actuals_tbl) * .66)
data_beet <- actuals_tbl[1:split2,]
data_end <- actuals_tbl[(split2 + 1):nrow(actuals_tbl),]
train_tbl <- datat_to
valid_tbl <- data_beet
test_tbl  <- data_end
h2o.init()
h2o.no_progress()
train_h2o <- as.h2o(train_tbl)
valid_h2o <- as.h2o(valid_tbl)
test_h2o  <- as.h2o(test_tbl)
y <- "SUM"
x <- setdiff(names(train_h2o), y)
# linear regression model used, but can use any model
automl_models_h2o <- h2o.automl(
x = x,
y = y,
training_frame = train_h2o,
validation_frame = valid_h2o,
leaderboard_frame = test_h2o,
max_runtime_secs = 60,
stopping_metric = "deviance")
SUM_DATA <- pac[,c(1,31)]
SUM_DATA %>% glimpse()
beer_sales_tbl_aug <- SUM_DATA %>%
tk_augment_timeseries_signature()
beer_sales_tbl_aug %>% glimpse()
beer_sales_tbl_clean <- beer_sales_tbl_aug %>%
select_if(~ !is.POSIXct(.)) %>%
select_if(~ !any(is.na(.))) %>%
mutate_if(is.ordered, ~ as.character(.) %>% as.factor)
beer_sales_tbl_clean %>% glimpse()
beer_sales_tbl_clean[,1] <- as.integer(beer_sales_tbl_clean$SUM)
#beer_sales_tbl_clean$month.lbl <- NULL
#beer_sales_tbl_clean$wday.lbl <- NULL
split <- round(nrow(beer_sales_tbl_clean) * .70)
datat_to <- beer_sales_tbl_clean[1:split,]
actuals_tbl <- beer_sales_tbl_clean[(split + 1):nrow(beer_sales_tbl_clean),]
split2 <- round(nrow(actuals_tbl) * .66)
data_beet <- actuals_tbl[1:split2,]
data_end <- actuals_tbl[(split2 + 1):nrow(actuals_tbl),]
train_tbl <- datat_to
valid_tbl <- data_beet
test_tbl  <- data_end
h2o.init()
train_h2o <- as.h2o(train_tbl)
valid_h2o <- as.h2o(valid_tbl)
test_h2o  <- as.h2o(test_tbl)
y <- "SUM"
x <- setdiff(names(train_h2o), y)
automl_models_h2o <- h2o.automl(
x = x,
y = y,
training_frame = train_h2o,
validation_frame = valid_h2o,
leaderboard_frame = test_h2o,
max_runtime_secs = 60,
stopping_metric = "deviance")
automl_leader <- automl_models_h2o@leader
pred_h2o <- h2o.predict(automl_leader, newdata = test_h2o)
h2o.performance(automl_leader, newdata = test_h2o)
error_tbl <- SUM_DATA %>%
tail(SUM_DATA,n=sum(nrow(data_end)))%>%
add_column(pred = pred_h2o %>% as.tibble() %>% pull(predict)) %>%
rename(actual = SUM) %>%
mutate(
error     = actual - pred,
error_pct = error / actual
)
error_tbl
error_tbl %>%
summarise(
me   = mean(error),
rmse = mean(error^2)^0.5,
mae  = mean(abs(error)),
mape = mean(abs(error_pct)),
mpe  = mean(error_pct)
) %>%
glimpse()
p<-SUM_DATA %>%
ggplot(aes(x = Index, y = SUM)) +
# Data - Spooky Orange
geom_point(size = 2, color = "gray", alpha = 0.5, shape = 21, fill = "orange") +
geom_line(color = "orange", size = 0.5) +
geom_ma(n = 1, color = "black")+
# Predictions - Spooky Purple
geom_point(aes(y = pred), size = 2, color = "gray", alpha = 1, shape = 21, fill = "purple", data = error_tbl) +
geom_line(aes(y = pred), color = "purple", size = 0.5, data = error_tbl) +
# Aesthetics
labs(
title = "Graf",
subtitle = "Algotimus H2O mal najvyššiu prestnosť MAPE:9,6%"
)
ggplotly(p)
plot_ly(SUM_DATA, x = ~Index, y = ~SUM)%>%
add_trace(colors = "orange",name = "Početnosť áut v čase",mode = "lines")%>%
add_trace(y = ~pred, colors = "gray",name = "Predikované hodnoty", mode = "lines+markers", alpha = 1,data = error_tbl)%>%
layout(title = "Graf",
xaxis = list(title = "Čas",
rangeslider = list(type = "date")),
yaxis = list(title = "Početnosť áut"))
shiny::runApp()
dataplot<-function.MyMachineLearning(dipu.pac_data)
runApp()
runApp()
~SUM
runApp()
runApp()
my_track
my_track
runApp()
runApp()
colnames(pac)
beer_sales_tbl_clean[,1] <- as.integer(beer_sales_tbl_clean %>% select(paste0(my_track)) %>% unlist(use.names=FALSE))
beer_sales_tbl_clean[,1] <- as.integer(beer_sales_tbl_clean %>% select(paste0("SUM")) %>% unlist(use.names=FALSE))
my_track
length(my_track)
my_track==""
runApp()
runApp()
runApp()
error_tbl <- SUM_DATA %>%
tail(SUM_DATA,n=sum(nrow(data_end)))%>%
add_column(pred = pred_h2o %>% as.tibble() %>% pull(predict)) %>%
rename(actual = get(my_track)) %>%
mutate(
error     = actual - pred,
error_pct = error / actual
)
error_tbl <- SUM_DATA %>%
tail(SUM_DATA,n=sum(nrow(data_end)))%>%
add_column(pred = pred_h2o %>% as.tibble() %>% pull(predict)) %>%
rename(actual = my_track) %>%
mutate(
error     = actual - pred,
error_pct = error / actual
)
error_tbl <- SUM_DATA %>%
tail(SUM_DATA,n=sum(nrow(data_end)))%>%
add_column(pred = pred_h2o %>% as.tibble() %>% pull(predict)) %>%
rename(actual = SUM_DATA) %>%
mutate(
error     = actual - pred,
error_pct = error / actual
)
error_tbl <- SUM_DATA %>%
tail(SUM_DATA,n=sum(nrow(data_end)))%>%
add_column(pred = pred_h2o %>% as.tibble() %>% pull(predict)) %>%
rename(actual = SUM) %>%
mutate(
error     = actual - pred,
error_pct = error / actual
)
error_tbl <- SUM_DATA %>%
tail(SUM_DATA,n=sum(nrow(data_end)))%>%
add_column(pred = pred_h2o %>% as.tibble() %>% pull(predict)) %>%
rename(actual = get("SUM")) %>%
mutate(
error     = actual - pred,
error_pct = error / actual
)
error_tbl <- SUM_DATA %>%
tail(SUM_DATA,n=sum(nrow(data_end)))%>%
add_column(pred = pred_h2o %>% as.tibble() %>% pull(predict)) %>%
plyr::rename(actual = get("SUM")) %>%
mutate(
error     = actual - pred,
error_pct = error / actual
)
?rename
colnames(SUM_DATA)
get(my_track)
get(my_track)
error_tbl <- SUM_DATA %>%
tail(SUM_DATA,n=sum(nrow(data_end)))%>%
add_column(pred = pred_h2o %>% as.tibble() %>% pull(predict)) %>%
rename(actual = SUM) %>%
mutate(
error     = actual - pred,
error_pct = error / actual
)
error_tbl <- SUM_DATA %>%
tail(SUM_DATA,n=sum(nrow(data_end)))%>%
add_column(pred = pred_h2o %>% as.tibble() %>% pull(predict)) %>%
plyr::rename(actual = get("SUM")) %>%
mutate(
error     = actual - pred,
error_pct = error / actual
)
colnames(SUM_DATA)
my_track
error_tbl <- SUM_DATA %>%
tail(SUM_DATA,n=sum(nrow(data_end)))%>%
add_column(pred = pred_h2o %>% as.tibble() %>% pull(predict)) %>%
rename_(actual = "get("+my_track+")") %>%
mutate(
error     = actual - pred,
error_pct = error / actual
)
error_tbl <- SUM_DATA %>%
tail(SUM_DATA,n=sum(nrow(data_end)))%>%
add_column(pred = pred_h2o %>% as.tibble() %>% pull(predict)) %>%
rename_(actual = "SUM") %>%
mutate(
error     = actual - pred,
error_pct = error / actual
)
error_tbl <- SUM_DATA %>%
tail(SUM_DATA,n=sum(nrow(data_end)))%>%
add_column(pred = pred_h2o %>% as.tibble() %>% pull(predict)) %>%
rename_(actual = paste0(my_track)) %>%
mutate(
error     = actual - pred,
error_pct = error / actual
)
runApp()
nn
nn
nn
nn
runApp()
runApp()
traceback()
runApp()
runApp()
runApp()
runApp()
runApp()
tags$b("Hello",color="red")
runApp()
tags$b("Hello",style="color:red")
runApp()
runApp()
