summary(fit_lm)
#na.omit(fit_lm)
}, warning = function(cond) {
message(paste(cond))
}, error = function(cond) {
message(paste(cond))
})
beer_sales_idx <- SUM_DATA %>% tk_index()
tail(beer_sales_idx)
Sys.setenv(TZ = "America/Toronto")
# Make future index
future_idx <- beer_sales_idx %>%
tk_make_future_timeseries(n_future = 10)
future_idx
new_data_tbl <- future_idx %>%
tk_get_timeseries_signature()
new_data_tbl
tryCatch({
# Make predictions
pred <-predict(fit_lm, newdata = select(new_data_tbl,-c(index, diff)))
}, warning = function(cond) {
message(paste(cond))
}, error = function(cond) {
message(paste(cond))
})
pred
pred <-predict(fit_lm, newdata = select(new_data_tbl,-c(index, diff)))
pred
tryCatch({
# Make predictions
pred <-predict(fit_lm, newdata = select(new_data_tbl,-c(index, diff)))
}, error = function(cond) {
message(paste(cond))
},warning = function(cond) {
message(paste(cond))
})
pred
runApp()
if (exists("my_track")==FALSE || is.null(my_track) || my_track == "") {
my_track = "SUM"
}
message(my_track)
SUM_DATA <- pac[, c(1, grep(paste0(my_track), colnames(pac)))]
SUM_DATA %>%
tk_index() %>%
tk_get_timeseries_summary() %>%
glimpse()
beer_sales_tbl_aug <- SUM_DATA %>%
tk_augment_timeseries_signature()
beer_sales_tbl_aug
beer_sales_tbl_aug <- na.omit(beer_sales_tbl_aug)
(l <- sapply(beer_sales_tbl_aug, function(x)
is.factor(x)))
m <- beer_sales_tbl_aug[, l]
ifelse(n <-
sapply(m, function(x)
length(levels(x))) == 1, "DROP", "NODROP")
#beer_sales_tbl_aug %>% select(paste0("Index")) %>% unlist(use.names = FALSE)
#fit_lm <-lm(SUM ~ ., data = select(beer_sales_tbl_aug, -c(Index, diff, month.lbl)))
lmx = as.formula(paste0(my_track, " ~ ", paste(".", collapse = "+")))
fit_lm <-
lm(lmx, data = select(beer_sales_tbl_aug,-c(Index, diff, month.lbl)))
tryCatch({
summary(fit_lm)
#na.omit(fit_lm)
}, warning = function(cond) {
message(paste(cond))
}, error = function(cond) {
message(paste(cond))
})
beer_sales_idx <- SUM_DATA %>% tk_index()
tail(beer_sales_idx)
Sys.setenv(TZ = "America/Toronto")
# Make future index
future_idx <- beer_sales_idx %>%
tk_make_future_timeseries(n_future = 10)
future_idx
new_data_tbl <- future_idx %>%
tk_get_timeseries_signature()
new_data_tbl
pac<-dipu.pac_data
if (exists("my_track")==FALSE || is.null(my_track) || my_track == "") {
my_track = "SUM"
}
message(my_track)
SUM_DATA <- pac[, c(1, grep(paste0(my_track), colnames(pac)))]
SUM_DATA %>%
tk_index() %>%
tk_get_timeseries_summary() %>%
glimpse()
beer_sales_tbl_aug <- SUM_DATA %>%
tk_augment_timeseries_signature()
beer_sales_tbl_aug
beer_sales_tbl_aug <- na.omit(beer_sales_tbl_aug)
(l <- sapply(beer_sales_tbl_aug, function(x)
is.factor(x)))
m <- beer_sales_tbl_aug[, l]
ifelse(n <-
sapply(m, function(x)
length(levels(x))) == 1, "DROP", "NODROP")
#beer_sales_tbl_aug %>% select(paste0("Index")) %>% unlist(use.names = FALSE)
#fit_lm <-lm(SUM ~ ., data = select(beer_sales_tbl_aug, -c(Index, diff, month.lbl)))
lmx = as.formula(paste0(my_track, " ~ ", paste(".", collapse = "+")))
fit_lm <-
lm(lmx, data = select(beer_sales_tbl_aug,-c(Index, diff, month.lbl)))
tryCatch({
summary(fit_lm)
#na.omit(fit_lm)
}, warning = function(cond) {
message(paste(cond))
}, error = function(cond) {
message(paste(cond))
})
beer_sales_idx <- SUM_DATA %>% tk_index()
tail(beer_sales_idx)
Sys.setenv(TZ = "America/Toronto")
# Make future index
future_idx <- beer_sales_idx %>%
tk_make_future_timeseries(n_future = 10)
future_idx
new_data_tbl <- future_idx %>%
tk_get_timeseries_signature()
new_data_tbl
tryCatch({
# Make predictions
pred <-predict(fit_lm, newdata = select(new_data_tbl,-c(index, diff)))
}, error = function(cond) {
message(paste(cond))
},warning = function(cond) {
message(paste(cond))
})
pred
tryCatch({
# Make predictions
pred <-predict(fit_lm, newdata = select(new_data_tbl,-c(index, diff)))
}, error = function(cond) {
message(paste(cond))
})
pred
runApp()
runApp()
pac<-dipu.pac_data
if (exists("my_track")==FALSE || is.null(my_track) || my_track == "") {
my_track = "SUM"
}
SUM_DATA <- pac[, c(1, grep(paste0(my_track), colnames(pac)))]
p <- SUM_DATA %>%
ggplot(aes_string("Index", paste0(my_track))) +
geom_line(col = palette_light()[1]) +
geom_point(col = palette_light()[1]) +
geom_ma(ma_fun = SMA,
n = 12,
size = 1) +
theme_tq() +
labs(title = "Beer Sales: 2007 through 2016")
output$plot71 <- renderPlotly(ggplotly(p))
ggplotly(p)
p <- SUM_DATA %>%
ggplot(aes_string("Index", paste0(my_track))) +
geom_line(col = palette_light()[1]) +
geom_point(col = palette_light()[1]) +
geom_ma(ma_fun = SMA,
n = 12,
size = 1) +
theme_tq() +
labs(title = "Beer Sales: 2007 through 2016")
ggplotly(p)
p
p <- SUM_DATA %>%
ggplot(aes_string("Index", paste0(my_track))) +
geom_line(col = palette_light()[1]) +
geom_point(col = palette_light()[1]) +
geom_ma(ma_fun = SMA,
n = 12,
size = 1) +
theme_tq()
ggplotly(p)
beer_sales_ts <- tk_ts(SUM_DATA)
beer_sales_ts
has_timetk_idx(beer_sales_ts)
tryCatch({
beer_sales_ts <- tk_ts(SUM_DATA)
beer_sales_ts
has_timetk_idx(beer_sales_ts)
}, error = function(cond) {
message("Exception ", paste(cond))
}, warning = function(cond) {
message("Exception ", paste(cond))
})
beer_sales_ts
View(beer_sales_tbl_aug)
file_list <- list.files( pattern="(SC)(.)*(.csv)$",recursive = TRUE,full.names = TRUE)
raw_data <-do.call("rbind", lapply(file_list, function(x) {
message(x)
read_csv(x)
}))
##browser()
dipu.raw_data<-raw_data
##browser()
save(dipu.raw_data,file=paste0("dipu.raw_data",".Rda"))
dipu.pre_data<-function.MyPreprocessing(dipu.raw_data)
source("Preprocessing.R")
source("Aggregation.R")
h2o.init()
##browser()
file_list <- list.files( pattern="(SC)(.)*(.csv)$",recursive = TRUE,full.names = TRUE)
raw_data <-do.call("rbind", lapply(file_list, function(x) {
message(x)
read_csv(x)
}))
##browser()
dipu.raw_data<-raw_data
##browser()
save(dipu.raw_data,file=paste0("dipu.raw_data",".Rda"))
dipu.pre_data<-function.MyPreprocessing(dipu.raw_data)
runApp()
pac<-dipu.pac_data
if (exists("my_track")==FALSE || is.null(my_track) || my_track == "") {
my_track = "SUM"
}
SUM_DATA <- pac[, c(1, grep(paste0(my_track), colnames(pac)))]
tryCatch({
p <- SUM_DATA %>%
ggplot(aes_string("Index", paste0(my_track))) +
geom_line(col = palette_light()[1]) +
geom_point(col = palette_light()[1]) +
geom_ma(ma_fun = SMA,
n = 12,
size = 1) +
theme_tq() +
labs(title = "Beer Sales: 2007 through 2016")
}, error = function(cond) {
message("Exception ", paste(cond))
}, warning = function(cond) {
message("Exception ", paste(cond))
})
output$plot71 <- renderPlotly(ggplotly(p))
ggplotly(p)
tryCatch({
beer_sales_ts <- tk_ts(SUM_DATA)
beer_sales_ts
has_timetk_idx(beer_sales_ts)
}, error = function(cond) {
message("Exception ", paste(cond))
}, warning = function(cond) {
message("Exception ", paste(cond))
})
beer_sales_ts
tryCatch({
beer_sales_ts <- tk_ts(SUM_DATA)
beer_sales_ts
has_timetk_idx(beer_sales_ts)
}, error = function(cond) {
message("Exception ", paste(cond))
})
beer_sales_ts
tryCatch({
fit_arima <- auto.arima(beer_sales_ts)
fit_arima
}, error = function(cond) {
message("Exception ", paste(cond))
})
sw_tidy(fit_arima)
sw_glance(fit_arima) %>%
glimpse()
sw_augment(fit_arima, timetk_idx = TRUE)
tryCatch({
p <- sw_augment(fit_arima, timetk_idx = TRUE) %>%
ggplot(aes(x = index, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0, color = "red") +
labs(title = "Residual diagnostic") +
theme_tq()
}, error = function(cond) {
message("Exception ", paste(cond))
}, warning = function(cond) {
message("Exception ", paste(cond))
})
ggplotly(p)
tryCatch({
p <- sw_augment(fit_arima, timetk_idx = TRUE) %>%
ggplot(aes(x = index, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0, color = "red") +
labs(title = "Residual diagnostic") +
theme_tq()
})
ggplotly(p)
fcast_arima <- forecast(fit_arima, h = 100)
class(fcast_arima)
has_timetk_idx(fcast_arima)
fcast_tbl <- sw_sweep(fcast_arima, timetk_idx = TRUE)
fcast_tbl
tryCatch({
# Visualize the forecast with ggplot
p <- fcast_tbl %>%
ggplot(aes_string(x = "index", y = paste0(my_track), color = paste0("key"))) +
# 95% CI
geom_ribbon(
aes(ymin = lo.95, ymax = hi.95),
fill = "#D5DBFF",
color = NA,
size = 0
) +
# 80% CI
geom_ribbon(
aes(
ymin = lo.80,
ymax = hi.80,
fill = key
),
fill = "#596DD5",
color = NA,
size = 0,
alpha = 0.8
) +
# Prediction
geom_line() +
geom_point() +
# Actuals
geom_line(aes_string(x = "Index", y = paste0(my_track)),
color = palette_light()[[1]],
data = actuals_tbl) +
geom_point(aes_string(x = "Index", y = paste0(my_track)),
color = palette_light()[[1]],
data = actuals_tbl) +
# Aesthetics
labs(
title = "Beer Sales Forecast: ARIMA",
x = "",
y = "Thousands of Tons",
subtitle = "sw_sweep tidies the auto.arima() forecast output"
) +
scale_color_tq() +
scale_fill_tq() +
theme_tq()
}, error = function(cond) {
message("Exception ", paste(cond))
})
split <- round(nrow(SUM_DATA) * .90)
datat_to <- SUM_DATA[1:split, ]
actuals_tbl <- SUM_DATA[(split + 1):nrow(SUM_DATA), ]
tryCatch({
# Visualize the forecast with ggplot
p <- fcast_tbl %>%
ggplot(aes_string(x = "index", y = paste0(my_track), color = paste0("key"))) +
# 95% CI
geom_ribbon(
aes(ymin = lo.95, ymax = hi.95),
fill = "#D5DBFF",
color = NA,
size = 0
) +
# 80% CI
geom_ribbon(
aes(
ymin = lo.80,
ymax = hi.80,
fill = key
),
fill = "#596DD5",
color = NA,
size = 0,
alpha = 0.8
) +
# Prediction
geom_line() +
geom_point() +
# Actuals
geom_line(aes_string(x = "Index", y = paste0(my_track)),
color = palette_light()[[1]],
data = actuals_tbl) +
geom_point(aes_string(x = "Index", y = paste0(my_track)),
color = palette_light()[[1]],
data = actuals_tbl) +
# Aesthetics
labs(
title = "Beer Sales Forecast: ARIMA",
x = "",
y = "Thousands of Tons",
subtitle = "sw_sweep tidies the auto.arima() forecast output"
) +
scale_color_tq() +
scale_fill_tq() +
theme_tq()
}, error = function(cond) {
message("Exception ", paste(cond))
})
ggplotly(p)
tryCatch({
# Visualize the forecast with ggplot
p <- fcast_tbl %>%
ggplot(aes_string(x = "index", y = paste0(my_track), color = paste0("key"))) +
# 95% CI
geom_ribbon(
aes(ymin = lo.95, ymax = hi.95),
fill = "#D5DBFF",
color = NA,
size = 0
) +
# 80% CI
geom_ribbon(
aes(
ymin = lo.80,
ymax = hi.80,
fill = key
),
fill = "#596DD5",
color = NA,
size = 0,
alpha = 0.8
) +
# Prediction
geom_line() +
geom_point() +
# Actuals
geom_line(aes_string(x = "Index", y = paste0(my_track)),
color = palette_light()[[1]],
data = actuals_tbl) +
geom_point(aes_string(x = "Index", y = paste0(my_track)),
color = palette_light()[[1]],
data = actuals_tbl) +
# Aesthetics
labs(
title = "Beer Sales Forecast: ARIMA",
x = "",
y = "Thousands of Tons",
subtitle = "sw_sweep tidies the auto.arima() forecast output"
) +
scale_color_tq() +
scale_fill_tq() +
theme_tq()
})
ggplotly(p)
## ARIMA ##
#====================================ARIMA + sweep: MAPE = 4.3% (sweep demo)==================================
SUM_DATA <- pac[,c(1,31)]
p<-SUM_DATA %>%
ggplot(aes(Index, SUM)) +
geom_line(col = palette_light()[1]) +
geom_point(col = palette_light()[1]) +
geom_ma(ma_fun = SMA, n = 12, size = 1) +
theme_tq() %>%
labs(title = "Beer Sales: 2007 through 2016")
ggplotly(p)
beer_sales_ts <- tk_ts(SUM_DATA)
beer_sales_ts
has_timetk_idx(beer_sales_ts)
fit_arima <- auto.arima(beer_sales_ts)
fit_arima
# sw_tidy - Get model coefficients
sw_tidy(fit_arima)
# sw_glance - Get model description and training set accuracy measures
sw_glance(fit_arima) %>%
glimpse()
# sw_augment - get model residuals
sw_augment(fit_arima, timetk_idx = TRUE)
p<-sw_augment(fit_arima, timetk_idx = TRUE) %>%
ggplot(aes(x = index, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0, color = "red") +
labs(title = "Residual diagnostic") +
theme_tq()
ggplotly(p)
# Forecast next 12 months
fcast_arima <- forecast(fit_arima, h = 100)
class(fcast_arima)
# Check if object has timetk index
has_timetk_idx(fcast_arima)
# sw_sweep - tidies forecast output
fcast_tbl <- sw_sweep(fcast_arima, timetk_idx = TRUE)
fcast_tbl
# Visualize the forecast with ggplot
p<-fcast_tbl %>%
ggplot(aes(x = index, y = SUM, color = key)) +
# 95% CI
geom_ribbon(aes(ymin = lo.95, ymax = hi.95),
fill = "#D5DBFF", color = NA, size = 0) +
# 80% CI
geom_ribbon(aes(ymin = lo.80, ymax = hi.80, fill = key),
fill = "#596DD5", color = NA, size = 0, alpha = 0.8)+
# Prediction
geom_line() +
geom_point() +
# Actuals
geom_line(aes(x = Index, y = SUM), color = palette_light()[[1]], data = actuals_tbl) +
geom_point(aes(x = Index, y = SUM), color = palette_light()[[1]], data = actuals_tbl)+
# Aesthetics
labs(title = "Beer Sales Forecast: ARIMA", x = "", y = "Thousands of Tons",
subtitle = "sw_sweep tidies the auto.arima() forecast output") +
scale_color_tq() +
scale_fill_tq() +
theme_tq()
ggplotly(p)
error_tbl <- left_join(actuals_tbl, fcast_tbl, by = c("Index" = "index"))%>%
rename(actual = SUM.x, pred = SUM.y) %>%
select(Index, actual, pred) %>%
mutate(
error     = actual - pred,
error_pct = error / actual
)
error_tbl
na.omit(error_tbl)
# Calculate test error metrics
test_residuals <- error_tbl$error
test_error_pct <- error_tbl$error_pct * 100 # Percentage error
me   <- mean(test_residuals, na.rm=TRUE)
rmse <- mean(test_residuals^2, na.rm=TRUE)^0.5
mae  <- mean(abs(test_residuals), na.rm=TRUE)
mape <- mean(abs(test_error_pct), na.rm=TRUE)
mpe  <- mean(test_error_pct, na.rm=TRUE)
tibble(me, rmse, mae, mape, mpe) %>% glimpse()
