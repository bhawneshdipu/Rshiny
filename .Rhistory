data1[data1$FILENAME=="SC1_MEJA"]
data1[[data1$FILENAME=="SC1_MEJA"],]
data1 %>% filter(FILENAME="SC1_MEJA")
data1 %>% filter(FILENAME=="SC1_MEJA")
data1$FILENAME
data1<- data1 %>% filter(FILENAME=="SC1_MEJA")
data1$FILENAME
data1$HEADINGS
data1$HEADINGS[0]
View(data1)
View(data1)
str_split("PP AA BB CC"," ",4)
data1
data1$CHANNEL
file_list <- list.files( pattern="(SC)(.)*(.csv)$",recursive = TRUE,full.names = TRUE)
raw_data <-
do.call("rbind", lapply(file_list, function(x) {
message(x)
read_csv(x)
}))
dipu.raw_data<-raw_data
save(dipu.raw_data,file=paste0("dipu.raw_data",".Rda"))
View(raw_data)
str_split("PP AA BB CC"," ",4)
strH<-str_split("PP AA BB CC"," ",4)
strH<-as.data.frame(strH)
data1$CHANNEL
raw_data$CHANNEL
data2<-raw_data
raw_data$CHANNEL<-gsub("1",strH[1,1],raw_data$CHANNEL)
raw_data$CHANNEL
raw_data$CHANNEL<-gsub("2",paste0(raw_data$CHANNEL,strH[1,2]),raw_data$CHANNEL)
strH[2]
strH[1,2]
strH
strH[[1]]
strH[[1,2]]
strH[[1,]]
strH[[1][2]]
strH$c..PP....AA....BB....CC..
strH[2,2]
strH[1,3]
strH[1,4]
strH[1,1]
strH[2,1]
strH[3,1]
raw_data$CHANNEL<-gsub("2",paste0(raw_data$CHANNEL,strH[2,1]),raw_data$CHANNEL)
raw_data$CHANNEL
raw_data$CHANNEL<-gsub("3",paste0(raw_data$CHANNEL,strH[2,1]),raw_data$CHANNEL)
raw_data$CHANNEL
raw_data$CHANNEL<-gsub("3",paste0("4",strH[2,1]),raw_data$CHANNEL)
raw_data$CHANNEL
raw_data$CHANNEL<-gsub("3",paste0("4",strH[4,1]),raw_data$CHANNEL)
raw_data$CHANNEL
raw_data$CHANNEL<-gsub("4",paste0("4",strH[4,1]),raw_data$CHANNEL)
raw_data$CHANNEL
raw_data$CHANNEL<-gsub("4",paste0("4_",strH[4,1]),raw_data$CHANNEL)
raw_data$CHANNEL
data1 <- data1 %>% filter(CHANNEL == "3",CHANNEL=="4")
data1$CHANNEL
raw_data$CHANNEL
data2
data1<data2
data1<-data2
data1 <- data1 %>% filter(CHANNEL == "3",CHANNEL=="4")
data1$CHANNEL
data1
data1<-data2
data1
data1 <- data1 %>% filter(CHANNEL == "3")
data1<-data2
data1 <- data1 %>% filter(CHANNEL == "3")
data1$CHANNEL
data1 <- data1 %>% filter(CHANNEL %in%  c("3","4"))
data1$CHANNEL
data1<-data2
data1 <- data1 %>% filter(CHANNEL %in%  c("3","4"))
data1$CHANNEL
shiny::runApp()
traceback()
runApp()
runApp()
runApp()
runApp()
View(data1)
data1$Date_Time <- data1$Date
data1$Date_Time <-do.call(paste, c(data1[c("Date_Time", "Time")], sep = ""))
data1$Date_Time <- as.POSIXct(data1$Date_Time, format = "%d%m%y%H%M")
data1$Date_Time <- as.Date(data1$Date_Time, "%d%m%y%H%M")
View(data1)
folder <- "./"
file_list <- list.files(path=folder, pattern="*.csv") # create list of all .csv files in folder
# read in each .csv file in file_list and rbind them into a data frame called data1
data1 <-
do.call("rbind",
lapply(file_list,
function(x)
read_csv(paste(folder, x, sep=''))))
#====================Preprocesing===============================
#chnge format of Date
data1$Date_Time <- data1$Date
data1$Date_Time <- do.call(paste,c(data1[c("Date_Time","Time")],sep = ""))
data1$Date_Time <- as.POSIXct(data1$Date_Time,format = "%d%m%y%H%M")
#data1$Date_Time <- as.Date(data1$Date_Time, "%d%m%y%H%M")
#data1$Date <- as.POSIXct(data1$Date,format = "%d%m%y")
data1<-data1[,c(ncol(data1),1:(ncol(data1)-1))]
View(data1)
runApp()
View(raw_data)
library(readr)
library(ggplot2)
library(plotly)
library(stringr)
library(DataLoader)
library(forecast)
library(tseries)
library(zoo)
library(xts)
library(fts)
library(MASS)
library(caret)
library(e1071)
library(dplyr)
#library(h2o)        # Awesome ML Library
library(timetk)     # Toolkit for working with time series in R
library(tidyquant)
library(anomalyDetection)
library(TSMining)
library(randomForest)
#install.packages("devtools")
#devtools::install_github("twitter/AnomalyDetection")
library(AnomalyDetection)
packageVersion('plotly')
# path to folder that holds multiple .csv files
#folder <- "C:/Users/USER/Documents/DP/Dataframe_Script/same_date/"
folder <- "./"
file_list <- list.files(path=folder, pattern="*.csv") # create list of all .csv files in folder
# read in each .csv file in file_list and rbind them into a data frame called data1
data1 <-
do.call("rbind",
lapply(file_list,
function(x)
read_csv(paste(folder, x, sep=''))))
#====================Preprocesing===============================
#chnge format of Date
data1$Date_Time <- data1$Date
data1$Date_Time <- do.call(paste,c(data1[c("Date_Time","Time")],sep = ""))
data1$Date_Time <- as.POSIXct(data1$Date_Time,format = "%d%m%y%H%M")
#data1$Date_Time <- as.Date(data1$Date_Time, "%d%m%y%H%M")
#data1$Date <- as.POSIXct(data1$Date,format = "%d%m%y")
data1<-data1[,c(ncol(data1),1:(ncol(data1)-1))]
View(data1)
file_list <-
list.files(pattern = "(SC)(.)*(.csv)$",
recursive = TRUE,
full.names = TRUE)
raw_data <-
do.call("rbind", lapply(file_list, function(x) {
message(x)
read_csv(x)
}))
dipu.raw_data <- raw_data
View(dipu.raw_data)
runApp()
runApp()
runApp()
runApp()
runApp()
View(raw_data)
runApp()
View(data1)
View(dipu.pre_data)
View(dipu.raw_data)
View(raw_data)
runApp()
runApp()
View(data1)
View(data1)
data1$Date <- as.POSIXct(data1$Date,format = "%d%m%y")
View(data1)
runApp()
View(data1)
data1$Time <- sub("(.{2})(.*)", "\\1:\\2", data1$Time)
View(data1)
runApp()
View(dipu.pre_data)
data1
runApp()
View(dipu.pre_data)
data1<-pipu.pre_data
data1<-dipu.pre_data
data1 <- data1 %>% filter(CHANNEL %in%  c("1_*","2_*"))
data1$CHANNEL
data1
data1<-dipu.pre_data
data1
data1 <- data1 %>% filter(CHANNEL %in%  c("1_*","2_*"))
data1
data1 <- data1
%>% filter(CHANNEL %in%  c("1","2"))
data1 <- data1
%>% filter(CHANNEL %in%  c("1","2"))
data1 <- data1 %>% filter(CHANNEL %in%  c("1","2"))
data1
data1<-dipu.pre_data
data1$CHANNEL
data1 <- data1 %>% filter(CHANNEL %in%  c("1","2"))
data1
data1$CHANNEL
data1 <- data1 %>% filter(CHANNEL %in%  c("1","2"))
data1<-dipu.pre_data
data1 <- data1 %>% filter(CHANNEL %in%  c("1","2"))
data1$CHANNEL
data1<-dipu.pre_data
file_list <- list.files( pattern="(SC)(.)*(.csv)$",recursive = TRUE,full.names = TRUE)
raw_data <-
do.call("rbind", lapply(file_list, function(x) {
message(x)
read_csv(x)
}))
dipu.raw_data<-raw_data
save(dipu.raw_data,file=paste0("dipu.raw_data",".Rda"))
dipu.pre_data<-function.MyPreprocessing(dipu.raw_data)
file_list <- list.files( pattern="(SC)(.)*(.csv)$",recursive = TRUE,full.names = TRUE)
raw_data <-
do.call("rbind", lapply(file_list, function(x) {
message(x)
read_csv(x)
}))
dipu.raw_data<-raw_data
save(dipu.raw_data,file=paste0("dipu.raw_data",".Rda"))
dipu.pre_data<-function.MyPreprocessing(dipu.raw_data)
dipu.pre_data<-function.MyPreprocessing(dipu.raw_data)
function.MyPreprocessing
source("Lib.R")
source("GetMyData.R")
source("Preprocessing.R")
source("Aggregation.R")
source("MyPlots.R")
source("MyFunctions.R")
file_list <- list.files( pattern="(SC)(.)*(.csv)$",recursive = TRUE,full.names = TRUE)
raw_data <-
do.call("rbind", lapply(file_list, function(x) {
message(x)
read_csv(x)
}))
dipu.raw_data<-raw_data
save(dipu.raw_data,file=paste0("dipu.raw_data",".Rda"))
dipu.pre_data<-function.MyPreprocessing(dipu.raw_data)
function.MyFilter
source("Preprocessing.R")
#1. GetMyData.R -> filename ==> data1
#2. Preprocessing -> data,channel ==> data1
#3. Aggregation ->data,channel,filename,aggregater ==> pac
source("Lib.R")
source("GetMyData.R")
source("Preprocessing.R")
source("Aggregation.R")
source("MyPlots.R")
source("MyFunctions.R")
file_list <- list.files( pattern="(SC)(.)*(.csv)$",recursive = TRUE,full.names = TRUE)
raw_data <-
do.call("rbind", lapply(file_list, function(x) {
message(x)
read_csv(x)
}))
dipu.raw_data<-raw_data
save(dipu.raw_data,file=paste0("dipu.raw_data",".Rda"))
dipu.pre_data<-function.MyPreprocessing(dipu.raw_data)
dipu.pre_data
data1 <- data1 %>% filter(CHANNEL %in%  c("1","2"))
data1<-dipu.pre_data
data1 <- data1 %>% filter(CHANNEL %in%  c("1","2"))
data1$CHANNEL
splitH <- str_split_fixed(data1$HEADINGS, " ", 4)
splitH <- as.data.frame(splitH)
#splitH <- unique(splitH)
data1$CHANNEL<-gsub("1", paste0("1_",splitH[1,1]), data1$CHANNEL)
data1$CHANNEL<-gsub("2", paste0("2_",splitH[2,1]), data1$CHANNEL)
data1$CHANNEL<-gsub("3", paste0("3_",splitH[3,1]), data1$CHANNEL)
data1$CHANNEL<-gsub("4", paste0("4_",splitH[4,1]), data1$CHANNEL)
data1$CHANNEL
data1 <- data1 %>% filter(CHANNEL %in%  c("1_*","2_*{0,3}"))
data1$CHANNEL
data1$CHANNEL
data1<-dipu.pre_data
data1 <- data1 %>% filter(CHANNEL %in%  c("1_*","2_*"))
data1$CHANNEL
data1<-dipu.pre_data
data1 <- data1 %>% filter(CHANNEL %in%  c("1_","2_"))
data1$CHANNEL
data1 <- data1 %>% filter(CHANNEL %in%  c("1","2"))
data1<-dipu.pre_data
data1 <- data1 %>% filter(CHANNEL %in%  c("1","2"))
data1$CHANNEL
runApp()
runApp()
View(dipu.pre_data)
runApp()
runApp()
runApp()
runApp()
#1. GetMyData.R -> filename ==> data1
#2. Preprocessing -> data,channel ==> data1
#3. Aggregation ->data,channel,filename,aggregater ==> pac
source("Lib.R")
source("GetMyData.R")
source("Preprocessing.R")
source("Aggregation.R")
source("MyPlots.R")
source("MyFunctions.R")
file_list <- list.files( pattern="(SC)(.)*(.csv)$",recursive = TRUE,full.names = TRUE)
raw_data <-
do.call("rbind", lapply(file_list, function(x) {
message(x)
read_csv(x)
}))
dipu.raw_data<-raw_data
save(dipu.raw_data,file=paste0("dipu.raw_data",".Rda"))
dipu.pre_data<-function.MyPreprocessing(dipu.raw_data)
data1<-function.MyFilter(dipu.pre_data,input$selectfile,input$selectdaterange,input$selectchannel)
View(dipu.pre_data)
runApp()
runApp()
#1. GetMyData.R -> filename ==> data1
#2. Preprocessing -> data,channel ==> data1
#3. Aggregation ->data,channel,filename,aggregater ==> pac
source("Lib.R")
source("GetMyData.R")
source("Preprocessing.R")
source("Aggregation.R")
source("MyPlots.R")
source("MyFunctions.R")
file_list <- list.files( pattern="(SC)(.)*(.csv)$",recursive = TRUE,full.names = TRUE)
raw_data <-
do.call("rbind", lapply(file_list, function(x) {
message(x)
read_csv(x)
}))
dipu.raw_data<-raw_data
save(dipu.raw_data,file=paste0("dipu.raw_data",".Rda"))
dipu.pre_data<-function.MyPreprocessing(dipu.raw_data)
data1<-function.getRawData()
data1<-function.getRawData()
#1. GetMyData.R -> filename ==> data1
#2. Preprocessing -> data,channel ==> data1
#3. Aggregation ->data,channel,filename,aggregater ==> pac
source("Lib.R")
source("GetMyData.R")
source("Preprocessing.R")
source("Aggregation.R")
source("MyPlots.R")
source("MyFunctions.R")
file_list <- list.files( pattern="(SC)(.)*(.csv)$",recursive = TRUE,full.names = TRUE)
raw_data <-
do.call("rbind", lapply(file_list, function(x) {
message(x)
read_csv(x)
}))
dipu.raw_data<-raw_data
save(dipu.raw_data,file=paste0("dipu.raw_data",".Rda"))
dipu.pre_data<-function.MyPreprocessing(dipu.raw_data)
data1<-function.getRawData()
data1<-function.MyPreprocessing(data1)
data1<-function.MyPreprocessing(data1)
traceback()
data1
if (file.exists(paste0("dipu.raw_data", ".Rda"))) {
local({
load(paste0("dipu.raw_data", ".Rda"))
})
} else{
file_list <-
list.files(pattern = "(SC)(.)*(.csv)$",
recursive = TRUE,
full.names = TRUE)
raw_data <-
do.call("rbind", lapply(file_list, function(x) {
message(x)
read_csv(x)
}))
dipu.raw_data <- raw_data
save(dipu.raw_data, file = paste0("dipu.raw_data", ".Rda"))
dipu.raw_data <- raw_data
data1<-raw_data
raw_data
}
source("Lib.R")
source("GetMyData.R")
function.getRawData()
data1<-function.getRawData()
load(paste0("dipu.raw_data", ".Rda"))
load(paste0("dipu.raw_data", ".Rda"))
#1. GetMyData.R -> filename ==> data1
#2. Preprocessing -> data,channel ==> data1
#3. Aggregation ->data,channel,filename,aggregater ==> pac
source("Lib.R")
source("GetMyData.R")
source("Preprocessing.R")
source("Aggregation.R")
source("MyPlots.R")
source("MyFunctions.R")
file_list <- list.files( pattern="(SC)(.)*(.csv)$",recursive = TRUE,full.names = TRUE)
raw_data <-
do.call("rbind", lapply(file_list, function(x) {
message(x)
read_csv(x)
}))
dipu.raw_data<-raw_data
save(dipu.raw_data,file=paste0("dipu.raw_data",".Rda"))
dipu.pre_data<-function.MyPreprocessing(dipu.raw_data)
data1<-function.getRawData()
data1<-function.getRawData()
data1
data1<-function.getRawData()
#1. GetMyData.R -> filename ==> data1
#2. Preprocessing -> data,channel ==> data1
#3. Aggregation ->data,channel,filename,aggregater ==> pac
source("Lib.R")
source("GetMyData.R")
source("Preprocessing.R")
source("Aggregation.R")
source("MyPlots.R")
source("MyFunctions.R")
file_list <- list.files( pattern="(SC)(.)*(.csv)$",recursive = TRUE,full.names = TRUE)
raw_data <-
do.call("rbind", lapply(file_list, function(x) {
message(x)
read_csv(x)
}))
dipu.raw_data<-raw_data
save(dipu.raw_data,file=paste0("dipu.raw_data",".Rda"))
dipu.pre_data<-function.MyPreprocessing(dipu.raw_data)
data1<-function.getRawData()
data1<-function.MyPreprocessing(data1)
data1<-function.MyFilter(data1,input$selectfile,input$selectdaterange,input$selectchannel)
runApp()
runApp()
runApp()
data1<-function.getRawData()
data1<-function.MyPreprocessing(data1)
data1<-function.MyFilter(dipu1,input$selectfile,input$selectdaterange,input$selectchannel)
runApp()
runApp()
runApp()
runApp()
res = AnomalyDetectionVec(SUM_DATA[,2], max_anoms=0.01, period=Myperiod, direction='both',
only_last=MylastOnly, plot=TRUE)
SUM_DATA <- pac[,c(grep(paste0(myX),colnames(pac)),grep(paste0(myY), colnames(pac)))]
pac<-function.MyAggregation(dipu.pre_data,input$selectdataaggregation)
output$plot31<-function.MyAnomalyDetection(pac,input$selectanomalyx,input$selectanomalyy,input$selectperiod,input$selectlastonly)
runApp()
abc <- as.numeric(rownames(SUM_DATA))
ggplot(pac, aes(x=Index, y=SP11)) + geom_line()
res = AnomalyDetectionTs(SUM_DATA, max_anoms=0.01, direction="pos", plot=TRUE, e_value = T)
res = AnomalyDetectionVec(SUM_DATA[,2], max_anoms=0.01, period=2, direction='both',
only_last=FALSE, plot=TRUE)
anomaly_table=res$anoms
SUM_DATA$Index_row <- abc
anomaly_table<-merge(SUM_DATA,anomaly_table,by.x = "Index_row",by.y = "index")
SUM_DATA <- pac[,c(1,12)]
abc <- as.numeric(rownames(SUM_DATA))
ggplot(pac, aes(x=Index, y=SP11)) + geom_line()
res = AnomalyDetectionTs(SUM_DATA, max_anoms=0.01, direction="pos", plot=TRUE, e_value = T)
res = AnomalyDetectionVec(SUM_DATA[,2], max_anoms=0.01, period=2, direction='both',
only_last=FALSE, plot=TRUE)
anomaly_table=res$anoms
SUM_DATA$Index_row <- abc
anomaly_table<-merge(SUM_DATA,anomaly_table,by.x = "Index_row",by.y = "index")
SUM_DATA <- pac[,c(1,12)]
abc <- as.numeric(rownames(SUM_DATA))
ggplot(pac, aes(x=Index, y=SP11)) + geom_line()
res = AnomalyDetectionTs(SUM_DATA, max_anoms=0.01, direction="pos", plot=TRUE, e_value = T)
res = AnomalyDetectionVec(SUM_DATA[,2], max_anoms=0.01, period=2, direction='both',
only_last=FALSE, plot=TRUE)
anomaly_table=res$anoms
SUM_DATA$Index_row <- abc
anomaly_table<-merge(SUM_DATA,anomaly_table,by.x = "Index_row",by.y = "index")
SUM_DATA <- dipu.pre_data[,c(1,12)]
SUM_DATA <- pac[,c(1,12)]
abc <- as.numeric(rownames(SUM_DATA))
ggplot(pac, aes(x=Index, y=SP11)) + geom_line()
res = AnomalyDetectionTs(SUM_DATA, max_anoms=0.01, direction="pos", plot=TRUE, e_value = T)
res = AnomalyDetectionVec(SUM_DATA[,2], max_anoms=0.01, period=2, direction='both',
only_last=FALSE, plot=TRUE)
anomaly_table=res$anoms
SUM_DATA$Index_row <- abc
anomaly_table<-merge(SUM_DATA,anomaly_table,by.x = "Index_row",by.y = "index")
plot_ly(SUM_DATA, x = ~Index, y = ~SP11)%>%
add_trace(colors = "orange",name = "Po?etnos? ?ut v ?ase",mode = "lines")%>%
add_trace(y = ~anoms, colors = "gray",name = "Anom?lie", mode = "markers", alpha = 1,data = anomaly_table)%>%
layout(title = "Graf",
xaxis = list(title = "Čas",
rangeslider = list(type = "date")),
yaxis = list(title = "Početnosť áut"))
SUM_DATA <- pac[,c(1,12)]
abc <- as.numeric(rownames(SUM_DATA))
ggplot(pac, aes(x=Index, y=SP11)) + geom_line()
res = AnomalyDetectionTs(SUM_DATA, max_anoms=0.01, direction="pos", plot=TRUE, e_value = T)
res = AnomalyDetectionVec(SUM_DATA[,2], max_anoms=0.01, period=2, direction='both',
only_last=FALSE, plot=TRUE)
anomaly_table=res$anoms
SUM_DATA$Index_row <- abc
anomaly_table<-merge(SUM_DATA,anomaly_table,by.x = "Index_row",by.y = "index")
plot_ly(SUM_DATA, x = ~Index, y = ~SP11)%>%
add_trace(colors = "orange",name = "Po?etnos? ?ut v ?ase",mode = "lines")%>%
add_trace(y = ~anoms, colors = "gray",name = "Anom?lie", mode = "markers", alpha = 1,data = anomaly_table)%>%
layout(title = "Graf",
xaxis = list(title = "Čas",
rangeslider = list(type = "date")),
yaxis = list(title = "Početnosť áut"))
runApp()
