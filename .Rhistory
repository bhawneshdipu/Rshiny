data1[data1$CHANNEL=="1_1",]
data1<-data1[data1$CHANNEL=="1_1",]
View(data1)
View(data1)
runApp()
paste0(channel)
paste0("1")
paste0(1)
runApp()
runApp()
runApp()
View(pac)
runApp()
runApp()
input$daterangeinput
runApp()
runApp()
runApp()
runApp()
View(data1)
runApp()
date <- format(as.Date("2017-08-19"), "%d/%m/%Y%H%M")
date
date <- format(as.Date("2017-08-19"), "%d-%m-%Y %H:%M")
date
View(data1)
date <- format(as.Date("2017-08-19"), "%d%m%y%H%M")
date
date <- format(as.Date("2017-08-19"), "%d-%m-%y %H:%M:%S")
date
View(data1)
runApp()
runApp()
View(data1)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(pac)
runApp()
runApp()
runApp()
runApp()
View(pac)
View(pac)
colnames(poc)
colnames(pac)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runif(20)
runif(1)
runif(1,1,3)
p<-runif(1)
p
p*10
p=int(p)
sample.int(1)
sample.int(10)
sample.int(1,100)
sample.int(1,10)
sample.int(1,1)
sample.int(2,1)
sample.int(3,1)
sample.int(10,1)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(readr)
library(ggplot2)
library(plotly)
library(stringr)
library(DataLoader)
library(forecast)
library(tseries)
library(zoo)
library(xts)
library(fts)
library(MASS)
library(caret)
library(e1071)
library(dplyr)
#library(h2o)        # Awesome ML Library
library(timetk)     # Toolkit for working with time series in R
library(tidyquant)
library(anomalyDetection)
library(TSMining)
#install.packages("devtools")
devtools::install_github("twitter/AnomalyDetection")
library(AnomalyDetection)
packageVersion('plotly')
folder <- "./"
file_list <- list.files(path=folder, pattern="*.csv") # create list of all .csv files in folder
# read in each .csv file in file_list and rbind them into a data frame called data1
data1 <-
do.call("rbind",
lapply(file_list,
function(x)
read_csv(paste(folder, x, sep=''))))
#====================Preprocesing===============================
#chnge format of Date
data1$Date_Time <- data1$Date
data1$Date_Time <- do.call(paste,c(data1[c("Date_Time","Time")],sep = ""))
data1$Date_Time <- as.POSIXct(data1$Date_Time,format = "%d%m%y%H%M")
#data1$Date_Time <- as.Date(data1$Date_Time, "%d%m%y%H%M")
#data1$Date <- as.POSIXct(data1$Date,format = "%d%m%y")
data1<-data1[,c(ncol(data1),1:(ncol(data1)-1))]
#Add ":" in time
data1$Time <- sub("(.{2})(.*)", "\\1:\\2", data1$Time)
#Necessarily Columns as.factor
data1$CHANNEL <- as.numeric(data1$CHANNEL)
data1$LOCATION <- as.factor(data1$LOCATION)
data1$SITE <- as.factor(data1$SITE)
data1$FILENAME <- as.factor(data1$FILENAME)
data1$INSTRUMENT <- as.factor(data1$INSTRUMENT)
data1$HEADINGS <- as.factor(data1$HEADINGS)
#data1$Time <- as.numeric(data1$Time)
#set measured data as numeric
data1$SP1 = as.numeric(data1$SP1)
data1$SP2 = as.numeric(data1$SP2)
data1$SP3 = as.numeric(data1$SP3)
data1$SP4 = as.numeric(data1$SP4)
data1$SP5 = as.numeric(data1$SP5)
data1$SP6 = as.numeric(data1$SP6)
data1$SP7 = as.numeric(data1$SP7)
data1$SP8 = as.numeric(data1$SP8)
data1$SP9 = as.numeric(data1$SP9)
data1$SP10 = as.numeric(data1$SP10)
data1$SP11 = as.numeric(data1$SP11)
data1$SP12 = as.numeric(data1$SP12)
data1$SP13 = as.numeric(data1$SP13)
data1$SP14 = as.numeric(data1$SP14)
data1$LN1 = as.numeric(data1$LN1)
data1$LN2 = as.numeric(data1$LN2)
data1$LN3 = as.numeric(data1$LN3)
data1$LN4 = as.numeric(data1$LN4)
data1$LN5 = as.numeric(data1$LN5)
data1$LN6 = as.numeric(data1$LN6)
data1$LN7 = as.numeric(data1$LN7)
data1$LN8 = as.numeric(data1$LN8)
data1$LN9 = as.numeric(data1$LN9)
data1$CS1 = as.numeric(data1$CS1)
data1$CS2 = as.numeric(data1$CS2)
data1$CS3 = as.numeric(data1$CS3)
data1$CS4 = as.numeric(data1$CS4)
data1$CS5 = as.numeric(data1$CS5)
data1$CS6 = as.numeric(data1$CS6)
#add column sum of cars in interval
data1$SUM<-rowSums(data1[,5:18])
#unfinished preparation I will explain what I need
splitH<-str_split_fixed(data1$HEADINGS, " ", 4)
splitH <- as.data.frame(splitH)
splitH <- unique(splitH)
data1$CHANNEL1 <- data1$CHANNEL
colnames(splitH) <- "CHANNEL1"
colnames(splitH)[2] <- "CHANNEL2"
colnames(splitH)[3] <- "CHANNEL3"
colnames(splitH)[4] <- "CHANNEL4"
splitH$rowNames <-row.names.data.frame(splitH)
# replace.if
#
# for (i in vector) {
# data1$CHANNEL<-gsub("1", splitH[1,1], data1$CHANNEL)
# data1$CHANNEL<-gsub("2", splitH[1,2], data1$CHANNEL)
# data1$CHANNEL<-gsub("3", splitH[1,3], data1$CHANNEL)
# data1$CHANNEL<-gsub("4", splitH[1,4], data1$CHANNEL)
# }
data1$CHANNEL <- do.call(paste,c(data1[c("CHANNEL1","CHANNEL")],sep = "_"))
data1$CHANNEL = as.factor(data1$CHANNEL)
data1$Time = as.factor(data1$Time)
data1$CHANNEL1 <- NULL
#===========================AGGREGATION==========================
filter<-filter(data1, CHANNEL == "PP",FILENAME == "SC1_MEJA")
df_XCV<-data1
abc <- df_XCV$Date_Time
df_XCV<-select_if(df_XCV, is.numeric)
df_XCV$Date_Time<- abc
df_XCV<-df_XCV[,c(ncol(df_XCV),1:(ncol(df_XCV)-1))]
#Create time series object
df_XCV_xts<-xts(df_XCV[, -1], order.by=as.POSIXct(df_XCV$Date_Time,tzone = Sys.getenv("TZ")))
ep <- endpoints(df_XCV_xts, on = "hours")
pac<-period.apply(df_XCV_xts[,(names(df_XCV_xts)) ], INDEX = ep, FUN = mean)
#Time series to DF
pac <-fortify(pac)
pac <-  select(pac, -c(PEAKINT, INTERVAL))
pac<-tk_augment_timeseries_signature(pac)
#source("Aggregation_Date.R")
#source("Aggregation_Date_Time.R")
#===========================PLOTS==========================
x <- ggplot(data1,aes(x = Date, y = SUM,col = CHANNEL))+
geom_bar(stat = "identity",size = 3,alpha = 0.5,fill = "blue")
x<-ggplot(data1,aes(x = Date, y = SUM,col = CHANNEL))+
geom_line(size = 0.5,alpha = 0.6)
p<-SUM_DATA %>%
ggplot(aes(x = Index, y = SUM))
plot_ly(SUM_DATA, x = ~Index, y = ~SUM)%>%
add_lines(alpha = 0.6)
ggplotly(x)
ggplot(SUM_DATA,aes(x=Index,y=SUM))+
# Training data
geom_line(color = palette_light()[[1]]) +
geom_point(color = palette_light()[[1]])+
# Predictions
geom_line(aes(y = value), color = palette_light()[[2]], data = predictions_tbl) +
geom_point(aes(y = value), color = palette_light()[[2]], data = predictions_tbl)+
# Actuals
geom_line(color = palette_light()[[1]], data = actuals_tbl) +
geom_point(color = palette_light()[[1]], data = actuals_tbl)+
theme_tq() +
labs(title = "Time series sum data")
#Plot of aggregation by SpeedBins
plot_ly(pac, x = ~Index, y = ~SP1 , name = 'Number of cars in time aggregated')%>%
add_trace(y = ~SP1, name = '0-50km/h', mode = 'lines') %>%
add_trace(y = ~SP2, name = '50-60km/h', mode = 'lines') %>%
add_trace(y = ~SP3, name = '60-70km/h', mode = 'lines') %>%
add_trace(y = ~SP4, name = '70-80km/h', mode = 'lines') %>%
add_trace(y = ~SP5, name = '80-90km/h', mode = 'lines') %>%
add_trace(y = ~SP6, name = '90-100km/h', mode = 'lines') %>%
add_trace(y = ~SP7, name = '100-110km/h', mode = 'lines') %>%
add_trace(y = ~SP8, name = '110-120km/h', mode = 'lines') %>%
add_trace(y = ~SP9, name = '120-130km/h', mode = 'lines') %>%
add_trace(y = ~SP10, name = '130-140km/h', mode = 'lines') %>%
add_trace(y = ~SP11, name = '140-150km/h', mode = 'lines') %>%
add_trace(y = ~SP12, name = '150-160km/h', mode = 'lines') %>%
add_trace(y = ~SP13, name = '160-180km/h', mode = 'lines')%>%
add_trace(y = ~SP14, name = '180-999km/h', mode = 'lines')%>%
add_trace(y = ~SUM, name = 'TOTAL', mode = 'lines')
#Plot of aggregation by LengthBins
plot_ly(pac, x = ~Index, y = ~LN1 , name = 'Number of cars in time aggregated')%>%
add_trace(y = ~LN1, name = '0-300 cm', mode = 'lines') %>%
#add_trace(y = ~LN2, name = '300-470 cm', mode = 'lines') %>%
add_trace(y = ~LN3, name = '470-550 cm', mode = 'lines') %>%
add_trace(y = ~LN4, name = '550-600 cm', mode = 'lines') %>%
add_trace(y = ~LN5, name = '600-1300 cm', mode = 'lines') %>%
add_trace(y = ~LN6, name = '1300-1800 cm', mode = 'lines') %>%
add_trace(y = ~LN7, name = '1800-2550 cm', mode = 'lines') %>%
add_trace(y = ~LN8, name = '2550-3600 cm', mode = 'lines') %>%
add_trace(y = ~LN9, name = '3600-9999 cm', mode = 'lines')
#Plot of aggregation by WeigthBins
plot_ly(agg_CS, x = ~Date, y = ~CS1 , name = 'Number of cars in time aggregated')%>%
add_trace(y = ~CS1, name = '0-2000 kg', mode = 'lines') %>%
#add_trace(y = ~CS2, name = '2000-3501 kg', mode = 'lines') %>%
add_trace(y = ~CS3, name = '3501-7497 kg', mode = 'lines') %>%
add_trace(y = ~CS4, name = '7497-12002 kg', mode = 'lines') %>%
add_trace(y = ~CS5, name = '12002-17998  kg', mode = 'lines') %>%
add_trace(y = ~CS6, name = '17998-23999  kg', mode = 'lines')
#Bar plot day of week
plot_ly(pac, x = ~wday.lbl, y = ~SP1, type = 'bar', name = "0-50km/h") %>%
add_trace(y = ~SP2, name = '50-60km/h', mode = 'lines') %>%
add_trace(y = ~SP3, name = '60-70km/h', mode = 'lines') %>%
add_trace(y = ~SP4, name = '70-80km/h', mode = 'lines') %>%
add_trace(y = ~SP5, name = '80-90km/h', mode = 'lines') %>%
add_trace(y = ~SP6, name = '90-100km/h', mode = 'lines') %>%
add_trace(y = ~SP7, name = '100-110km/h', mode = 'lines') %>%
add_trace(y = ~SP8, name = '110-120km/h', mode = 'lines') %>%
add_trace(y = ~SP9, name = '120-130km/h', mode = 'lines') %>%
add_trace(y = ~SP10, name = '130-140km/h', mode = 'lines') %>%
add_trace(y = ~SP11, name = '140-150km/h', mode = 'lines') %>%
add_trace(y = ~SP12, name = '150-160km/h', mode = 'lines') %>%
add_trace(y = ~SP13, name = '160-180km/h', mode = 'lines')%>%
add_trace(y = ~SP14, name = '180-999km/h', mode = 'lines')%>%
#add_trace(y = ~SUM, name = 'TOTAL', mode = 'lines')%>%
layout(title = "Počty áuto podľa dni v týždni",yaxis = list(title = 'Count'), barmode = 'group')
#pie plot by day of week
plot_ly(pac, labels = ~wday.lbl, values = ~SP10, type = 'pie',textposition = 'inside') %>%
layout(title = 'Kol??ov? graf')
#boxplot
plot_ly(pac,y = ~SP1, name = '0-50km/h',type = 'box')%>%
add_trace(y = ~SP2, name = '50-60km/h', mode = 'lines') %>%
add_trace(y = ~SP3, name = '60-70km/h', mode = 'lines') %>%
add_trace(y = ~SP4, name = '70-80km/h', mode = 'lines') %>%
add_trace(y = ~SP5, name = '80-90km/h', mode = 'lines') %>%
add_trace(y = ~SP6, name = '90-100km/h', mode = 'lines') %>%
add_trace(y = ~SP7, name = '100-110km/h', mode = 'lines') %>%
add_trace(y = ~SP8, name = '110-120km/h', mode = 'lines') %>%
add_trace(y = ~SP9, name = '120-130km/h', mode = 'lines') %>%
add_trace(y = ~SP10, name = '130-140km/h', mode = 'lines') %>%
add_trace(y = ~SP11, name = '140-150km/h', mode = 'lines') %>%
add_trace(y = ~SP12, name = '150-160km/h', mode = 'lines') %>%
add_trace(y = ~SP13, name = '160-180km/h', mode = 'lines')%>%
add_trace(y = ~SP14, name = '180-999km/h', mode = 'lines')%>%
layout(title = "Boxplot by day of week")
plot_ly(data1,x = ~CHANNEL,y = ~SP11, color = ~wday.lbl,type = "box")%>%
layout(boxmode = "group")
View(pac)
View(pac[,c[1,12]])
View(pac[,c(1,12)])
SUM_DATA <- pac[,c(1,12)]
abc <- as.numeric(rownames(SUM_DATA))
ggplot(pac, aes(x=Index, y=SP11)) + geom_line()
res = AnomalyDetectionTs(SUM_DATA, max_anoms=0.01, direction="pos", plot=TRUE, e_value = T)
res = AnomalyDetectionVec(SUM_DATA[,2], max_anoms=0.01, period=96, direction='both',
only_last=FALSE, plot=TRUE)
res = AnomalyDetectionVec(SUM_DATA[,2], max_anoms=0.01, period=2, direction='both',
only_last=FALSE, plot=TRUE)
anomaly_table=res$anoms
SUM_DATA$Index_row <- abc
anomaly_table<-merge(SUM_DATA,anomaly_table,by.x = "Index_row",by.y = "index")
plot_ly(SUM_DATA, x = ~Index, y = ~SP11)%>%
add_trace(colors = "orange",name = "Po?etnos? ?ut v ?ase",mode = "lines")%>%
add_trace(y = ~anoms, colors = "gray",name = "Anom?lie", mode = "markers", alpha = 1,data = anomaly_table)%>%
layout(title = "Graf",
xaxis = list(title = "Čas",
rangeslider = list(type = "date")),
yaxis = list(title = "Početnosť áut"))
runApp()
runApp()
runApp()
runApp()
get("hello")
get("hello")
~get(myX)
x<-~get(myX)
x
myX<"Hello"
myX<-"Hello"
x<-~get(myX)
x
runApp()
runApp()
runApp()
SUM_DATA <- pac[,c(1,12)]
SUM_DATA
grep(paste0("SP11"), colnames(SUM_DATA)
)
grep(paste0("SP11"), colnames(pac)
)
runApp()
SUM_DATA <- pac[,c(1,12)]
colnames(SUM_DATA)
runApp()
runApp()
runApp()
runApp()
runApp()
SUM_DATA <- pac[,c(1,12)]
colnames(SUM_DATA)
colnames(pac)
runApp()
SUM_DATA <- pac[,c(1,12)]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
SUM_DATA[,2]
View(anomaly_table)
runApp()
runApp()
SUM_DATA <- pac[,c(1,12)]
abc <- as.numeric(rownames(SUM_DATA))
ggplot(pac, aes(x=Index, y=SP11)) + geom_line()
res = AnomalyDetectionTs(SUM_DATA, max_anoms=0.01, direction="pos", plot=TRUE, e_value = T)
res = AnomalyDetectionVec(SUM_DATA[,2], max_anoms=0.01, period=2, direction='both',
only_last=FALSE, plot=TRUE)
anomaly_table=res$anoms
SUM_DATA$Index_row <- abc
anomaly_table<-merge(SUM_DATA,anomaly_table,by.x = "Index_row",by.y = "index")
View(anomaly_table)
View(res)
res$anoms
abc
runApp()
View(pac)
View(pac[,c(1,12)])
SUM_DATA <- pac[,c(1,12)]
abc <- as.numeric(rownames(SUM_DATA))
abc
View(abc)
SUM_DATA <- pac[,c(grep(paste0(myX),colnames(pac)),grep(paste0(myY), colnames(pac)))]
myX<-"Index"
myY<-"SP11"
SUM_DATA <- pac[,c(grep(paste0(myX),colnames(pac)),grep(paste0(myY), colnames(pac)))]
View(SUM_DATA)
abc <- as.numeric(rownames(SUM_DATA))
View(abc)
ggplot(pac, aes(x=myX, y=myY)) + geom_line()
res = AnomalyDetectionVec(SUM_DATA[,2], max_anoms=0.01, period=Myperiod, direction='both',
only_last=MylastOnly, plot=TRUE)
Myperiod<-2
res = AnomalyDetectionVec(SUM_DATA[,2], max_anoms=0.01, period=Myperiod, direction='both',
only_last=MylastOnly, plot=TRUE)
MylastOnly<-FALSE
res = AnomalyDetectionVec(SUM_DATA[,2], max_anoms=0.01, period=Myperiod, direction='both',
only_last=MylastOnly, plot=TRUE)
anomaly_table=res$anoms
SUM_DATA[[paste0(myX,"_row")]] <- abc
View(SUM_DATA)
anomaly_table<-merge(SUM_DATA,anomaly_table,by.x = paste0(myX,"_row"),by.y = "index")
renderPlotly({
plot_ly(SUM_DATA, x = ~get(myX), y = ~get(myY))%>%
add_trace(colors = "orange",name = "Po?etnos? ?ut v ?ase",mode = "lines")%>%
add_trace(y = ~anoms, colors = "gray",name = "Anom?lie", mode = "markers", alpha = 1,data = anomaly_table)%>%
layout(title = "Graf",
xaxis = list(title = "Čas",
rangeslider = list(type = "date")),
yaxis = list(title = "Početnosť áut"))
})
renderPlotly({
plot_ly(SUM_DATA, x = ~get(myX), y = ~get(myY))%>%
add_trace(colors = "orange",name = "Po?etnos? ?ut v ?ase",mode = "lines")%>%
add_trace(y = ~anoms, colors = "gray",name = "Anom?lie", mode = "markers", alpha = 1,data = anomaly_table)%>%
layout(title = "Graf",
xaxis = list(title = "Čas",
rangeslider = list(type = "date")),
yaxis = list(title = "Početnosť áut"))
})
plot_ly(SUM_DATA, x = ~get(myX), y = ~get(myY))%>%
add_trace(colors = "orange",name = "Po?etnos? ?ut v ?ase",mode = "lines")%>%
add_trace(y = ~anoms, colors = "gray",name = "Anom?lie", mode = "markers", alpha = 1,data = anomaly_table)%>%
layout(title = "Graf",
xaxis = list(title = "Čas",
rangeslider = list(type = "date")),
yaxis = list(title = "Početnosť áut"))
})
plot_ly(SUM_DATA, x = ~get(myX), y = ~get(myY))%>%
add_trace(colors = "orange",name = "Po?etnos? ?ut v ?ase",mode = "lines")%>%
add_trace(y = ~anoms, colors = "gray",name = "Anom?lie", mode = "markers", alpha = 1,data = anomaly_table)%>%
layout(title = "Graf",
xaxis = list(title = "Čas",
rangeslider = list(type = "date")),
yaxis = list(title = "Početnosť áut"))
runApp()
SUM_DATA <- pac[,c(grep(paste0(myX),colnames(pac)),grep(paste0(myY), colnames(pac)))]
runApp()
runApp()
runApp()
myX<-"Index"
myY<-"SP11"
Myperiod<-2
MylastOnly<-FALSE
SUM_DATA <- pac[,c(grep(paste0(myX),colnames(pac)),grep(paste0(myY), colnames(pac)))]
abc <- as.numeric(rownames(SUM_DATA))
SUM_DATA <- pac[,c(grep(paste0(myX),colnames(pac)),grep(paste0(myY), colnames(pac)))]
abc <- as.numeric(rownames(SUM_DATA))
res = AnomalyDetectionVec(SUM_DATA[,2], max_anoms=0.01, period=Myperiod, direction='both',
only_last=MylastOnly, plot=TRUE)
View(res)
anomaly_table=res$anoms
View(anomaly_table)
View(abc)
SUM_DATA$Index_row <- abc
SUM_DATA[[paste0(myX,"_row")]] <- abc
View(SUM_DATA)
anomaly_table<-merge(SUM_DATA,anomaly_table,by.x = paste0(myX,"_row"),by.y = "index")
View(anomaly_table)
anomaly_table<-merge(SUM_DATA,anomaly_table,by.x = paste0(myX,"_row"),by.y = "Index")
anomaly_table<-merge(SUM_DATA,anomaly_table,by.x = paste0(myX,"_row"),by.y = "index")
anomaly_table<-merge(SUM_DATA,anomaly_table,by.x = paste0(myX,"_row"),by.y = "index")
View(SUM_DATA)
anomaly_table=res$anoms
View(anomaly_table)
anomaly_table<-merge(SUM_DATA,anomaly_table,by.x = paste0(myX,"_row"),by.y = "index")
plot_ly(SUM_DATA, x = ~get(myX), y = ~get(myY))%>%
add_trace(colors = "orange",name = "Po?etnos? ?ut v ?ase",mode = "lines")%>%
add_trace(y = ~anoms, colors = "gray",name = "Anom?lie", mode = "markers", alpha = 1,data = anomaly_table)%>%
layout(title = "Graf",
xaxis = list(title = "Čas",
rangeslider = list(type = "date")),
yaxis = list(title = "Početnosť áut"))
shiny::runApp(display.mode="showcase")
shiny::runApp(display.mode="showcase")
runApp()
next()
abc
abc
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dim(anamaly_table)
runApp()
anomaly_table<-NULL
anomaly_table.null
anomaly_table.isnull
anomaly_table is.null
is.null(anomaly_table )
runApp()
is.null(anomaly_table )
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
