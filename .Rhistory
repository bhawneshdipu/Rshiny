(l <- sapply(beer_sales_tbl_aug, function(x) is.factor(x)))
m <- beer_sales_tbl_aug[, l]
ifelse(n <- sapply(m, function(x) length(levels(x))) == 1, "DROP", "NODROP")
fit_lm <- lm(SUM~ ., data = select(beer_sales_tbl_aug, -c(Index, diff,month.lbl)))
summary(fit_lm)
#na.omit(fit_lm)
beer_sales_idx <- SUM_DATA %>%
tk_index()
tail(beer_sales_idx)
Sys.setenv(TZ = "America/Toronto")
# Make future index
future_idx <- beer_sales_idx %>%
tk_make_future_timeseries(n_future =10)
future_idx
new_data_tbl <- future_idx %>%
tk_get_timeseries_signature()
new_data_tbl
# Make predictions
pred <- predict(fit_lm, newdata = select(new_data_tbl, -c(index, diff)))
predictions_tbl <- tibble(
Index  = future_idx,
value = pred
)
predictions_tbl
split <- round(nrow(SUM_DATA) * .90)
datat_to <- SUM_DATA[1:split,]
actuals_tbl <- SUM_DATA[(split + 1):nrow(SUM_DATA),]
#colnames(actuals_tbl)[2] <- "value"
p<-ggplot(SUM_DATA,aes(x=Index,y=SUM))+
# Training data
geom_line(color = palette_light()[[1]]) +
geom_point(color = palette_light()[[1]])+
# Predictions
geom_line(aes(y = value), color = palette_light()[[4]], data = predictions_tbl) +
geom_point(aes(y = value), color = palette_light()[[4]], data = predictions_tbl)+
# Actuals
geom_line(aes(y = SUM),color = palette_light()[[3]], data = actuals_tbl) +
geom_point(aes(y = SUM),color = palette_light()[[3]], data = actuals_tbl)+
#theme_tq() +
labs(title = "Time series sum data")
ggplotly(p)
error_tbl <- left_join(actuals_tbl, predictions_tbl) %>%
rename(actual = SUM, pred = value) %>%
mutate(
error     = actual - pred,
error_pct = error / actual
)
error_tbl
# Calculating test error metrics
test_residuals <- error_tbl$error
test_error_pct <- error_tbl$error_pct * 100 # Percentage error
me   <- mean(test_residuals, na.rm=TRUE)
rmse <- mean(test_residuals^2, na.rm=TRUE)^0.5
mae  <- mean(abs(test_residuals), na.rm=TRUE)
mape <- mean(abs(test_error_pct), na.rm=TRUE)
mpe  <- mean(test_error_pct, na.rm=TRUE)
tibble(me, rmse, mae, mape, mpe) %>% glimpse()
# Coerce to xts
beer_sales_xts <- tk_xts(SUM_DATA)
# Show the first six rows of the xts object
beer_sales_xts %>%
head()
tk_tbl(beer_sales_xts, rename_index = "date")
# Coerce to ts
beer_sales_ts <- tk_ts(SUM_DATA)
# Show the calendar-printout
beer_sales_ts
tk_tbl(beer_sales_ts, rename_index = "date")
has_timetk_idx(beer_sales_ts)
# If timetk_idx is present, can get original dates back
tk_tbl(beer_sales_ts, timetk_idx = TRUE, rename_index = "date")
runApp()
SUM_DATA <- pac[,c(1,31)]
SUM_DATA %>%
tk_index() %>%
tk_get_timeseries_summary() %>%
glimpse()
beer_sales_tbl_aug <- SUM_DATA %>%
tk_augment_timeseries_signature()
beer_sales_tbl_aug
beer_sales_tbl_aug<-na.omit(beer_sales_tbl_aug)
(l <- sapply(beer_sales_tbl_aug, function(x) is.factor(x)))
m <- beer_sales_tbl_aug[, l]
ifelse(n <- sapply(m, function(x) length(levels(x))) == 1, "DROP", "NODROP")
fit_lm <- lm(SUM~ ., data = select(beer_sales_tbl_aug, -c(Index, diff,month.lbl)))
summary(fit_lm)
beer_sales_idx <- SUM_DATA %>%
tk_index()
tail(beer_sales_idx)
Sys.setenv(TZ = "America/Toronto")
# Make future index
future_idx <- beer_sales_idx %>%
tk_make_future_timeseries(n_future =10)
future_idx
new_data_tbl <- future_idx %>%
tk_get_timeseries_signature()
new_data_tbl
pred <- predict(fit_lm, newdata = select(new_data_tbl, -c(index, diff)))
predictions_tbl <- tibble(
Index  = future_idx,
value = pred
)
SUM_DATA <- pac[,c(1,31)]
SUM_DATA %>%
tk_index() %>%
tk_get_timeseries_summary() %>%
glimpse()
beer_sales_tbl_aug <- SUM_DATA %>%
tk_augment_timeseries_signature()
beer_sales_tbl_aug
beer_sales_tbl_aug<-na.omit(beer_sales_tbl_aug)
(l <- sapply(beer_sales_tbl_aug, function(x) is.factor(x)))
m <- beer_sales_tbl_aug[, l]
ifelse(n <- sapply(m, function(x) length(levels(x))) == 1, "DROP", "NODROP")
fit_lm <- lm(SUM~ ., data = select(beer_sales_tbl_aug, -c(Index, diff,month.lbl)))
summary(fit_lm)
beer_sales_idx <- SUM_DATA %>%
tk_index()
tail(beer_sales_idx)
Sys.setenv(TZ = "America/Toronto")
# Make future index
future_idx <- beer_sales_idx %>%
tk_make_future_timeseries(n_future =10)
future_idx
new_data_tbl <- future_idx %>%
tk_get_timeseries_signature()
new_data_tbl
# Make predictions
pred <- predict(fit_lm, newdata = select(new_data_tbl, -c(index, diff)))
predictions_tbl <- tibble(
Index  = future_idx,
value = pred
)
pred <- predict(fit_lm, newdata = select(new_data_tbl, -c(index, diff)))
SUM_DATA <- pac[,c(1,31)]
SUM_DATA %>%
tk_index() %>%
tk_get_timeseries_summary() %>%
glimpse()
beer_sales_tbl_aug <- SUM_DATA %>%
tk_augment_timeseries_signature()
beer_sales_tbl_aug
beer_sales_tbl_aug<-na.omit(beer_sales_tbl_aug)
(l <- sapply(beer_sales_tbl_aug, function(x) is.factor(x)))
m <- beer_sales_tbl_aug[, l]
ifelse(n <- sapply(m, function(x) length(levels(x))) == 1, "DROP", "NODROP")
fit_lm <- lm(SUM~ ., data = select(beer_sales_tbl_aug, -c(Index, diff,month.lbl)))
summary(fit_lm)
#na.omit(fit_lm)
beer_sales_idx <- SUM_DATA %>%
tk_index()
tail(beer_sales_idx)
Sys.setenv(TZ = "America/Toronto")
# Make future index
future_idx <- beer_sales_idx %>%
tk_make_future_timeseries(n_future =10)
future_idx
new_data_tbl <- future_idx %>%
tk_get_timeseries_signature()
new_data_tbl
# Make predictions
pred <- predict(fit_lm, newdata = select(new_data_tbl, -c(index, diff)))
predictions_tbl <- tibble(
Index  = future_idx,
value = pred
)
predictions_tbl
split <- round(nrow(SUM_DATA) * .90)
datat_to <- SUM_DATA[1:split,]
actuals_tbl <- SUM_DATA[(split + 1):nrow(SUM_DATA),]
#colnames(actuals_tbl)[2] <- "value"
p<-ggplot(SUM_DATA,aes(x=Index,y=SUM))+
# Training data
geom_line(color = palette_light()[[1]]) +
geom_point(color = palette_light()[[1]])+
# Predictions
geom_line(aes(y = value), color = palette_light()[[4]], data = predictions_tbl) +
geom_point(aes(y = value), color = palette_light()[[4]], data = predictions_tbl)+
# Actuals
geom_line(aes(y = SUM),color = palette_light()[[3]], data = actuals_tbl) +
geom_point(aes(y = SUM),color = palette_light()[[3]], data = actuals_tbl)+
#theme_tq() +
labs(title = "Time series sum data")
ggplotly(p)
output$plot61<-renderPlotly(ggplotly(p))
error_tbl <- left_join(actuals_tbl, predictions_tbl) %>%
rename(actual = SUM, pred = value) %>%
mutate(
error     = actual - pred,
error_pct = error / actual
)
error_tbl
# Calculating test error metrics
test_residuals <- error_tbl$error
test_error_pct <- error_tbl$error_pct * 100 # Percentage error
me   <- mean(test_residuals, na.rm=TRUE)
rmse <- mean(test_residuals^2, na.rm=TRUE)^0.5
mae  <- mean(abs(test_residuals), na.rm=TRUE)
mape <- mean(abs(test_error_pct), na.rm=TRUE)
mpe  <- mean(test_error_pct, na.rm=TRUE)
tibble(me, rmse, mae, mape, mpe) %>% glimpse()
# Coerce to xts
beer_sales_xts <- tk_xts(SUM_DATA)
# Show the first six rows of the xts object
beer_sales_xts %>%
head()
tk_tbl(beer_sales_xts, rename_index = "date")
# Coerce to ts
beer_sales_ts <- tk_ts(SUM_DATA)
# Show the calendar-printout
beer_sales_ts
tk_tbl(beer_sales_ts, rename_index = "date")
has_timetk_idx(beer_sales_ts)
# If timetk_idx is present, can get original dates back
tk_tbl(beer_sales_ts, timetk_idx = TRUE, rename_index = "date")
runApp()
fit_lm <-lm(SUM ~ ., data = select(beer_sales_tbl_aug, -c(Index, diff, month.lbl)))
View(actuals_tbl)
View(beer_sales_tbl_aug)
future_idx
fit_lm <-lm(SUM ~ ., data = select(beer_sales_tbl_aug, -c(Index, diff, month.lbl)))
select(beer_sales_tbl_aug, -c(Index, diff, month.lbl)
)
select(beer_sales_tbl_aug, -c(Index, diff, month.lbl))
select(beer_sales_tbl_aug, -c(paste0("Index"), paste0("diff"), paste0("month.lbl"))
)
-c
select(beer_sales_tbl_aug, -c(Index, diff, month.lbl))_
select(beer_sales_tbl_aug, -c(Index, diff, month.lbl))_
beer_sales_tbl_aug %>% select(paste0("Index")) %>% unlist(use.names = FALSE)
runApp()
runApp()
runApp()
runApp()
fit_lm <-lm(SUM ~ ., data = beer_sales_tbl_aug %>% select(paste0("Index"), paste0("diff"), paste0(my_track_lbl)))
my_track_lbl="month.lbl"
my_track="SUM"
fit_lm <-lm(SUM ~ ., data = beer_sales_tbl_aug %>% select(paste0("Index"), paste0("diff"), paste0(my_track_lbl)))
fit_lm <-lm(SUM ~ ., data = beer_sales_tbl_aug %>% select(paste0("Index"), paste0("diff"), paste0(my_track_lbl)))
beer_sales_tbl_aug %>% select(paste0("Index"), paste0("diff"), paste0(my_track_lbl))
select(beer_sales_tbl_aug, -c(Index, diff, month.lbl))
lm(paste0("SUM") ~ ., data = select(beer_sales_tbl_aug, -c(Index, diff, month.lbl)))
fit_lm <-lm(get(my_track) ~ ., data = select(beer_sales_tbl_aug, -c(Index, diff, month.lbl)))
fit_lm
runApp()
runApp()
runApp()
runApp()
runApp()
View(error_tbl)
runApp()
my_track
fit_lm
future_idx
pred
future_idx
new_data_tbl
new_data_tbl$SUM
future_idx <- beer_sales_idx %>%
tk_make_future_timeseries(n_future = 10)
future_idx
new_data_tbl <- future_idx %>%
tk_get_timeseries_signature()
new_data_tbl
beer_sales_idx <- SUM_DATA %>%
tk_index()
beer_sales_idx
SUM_DATA %>% tk_index()
fit_lm <-lm(SUM ~ ., data = select(beer_sales_tbl_aug, -c(Index, diff, month.lbl)))
tryCatch({
summary(fit_lm)
#na.omit(fit_lm)
},warning=function(cond){
message(paste(cond))
},error=function(cond) {
message(paste(cond))
})
beer_sales_idx <- SUM_DATA %>% tk_index()
tail(beer_sales_idx)
Sys.setenv(TZ = "America/Toronto")
# Make future index
future_idx <- beer_sales_idx %>%
tk_make_future_timeseries(n_future = 10)
future_idx
new_data_tbl <- future_idx %>%
tk_get_timeseries_signature()
new_data_tbl
tryCatch({
# Make predictions
pred <-predict(fit_lm, newdata = select(new_data_tbl, -c(index, diff)))
}, warning = function(cond) {
message(paste(cond))
}, error = function(cond) {
message(paste(cond))
})
tryCatch({
predictions_tbl <- tibble(Index  = future_idx,
value = pred)
}, warning = function(cond) {
message(paste(cond))
}, error = function(cond) {
message(paste(cond))
})
predictions_tbl
split <- round(nrow(SUM_DATA) * .90)
datat_to <- SUM_DATA[1:split,]
actuals_tbl <- SUM_DATA[(split + 1):nrow(SUM_DATA),]
#colnames(actuals_tbl)[2] <- "value"
p <- ggplot(SUM_DATA, aes_string(x = paste0("Index"), y = paste0(my_track))) +
# Training data
geom_line(color = palette_light()[[1]]) +
geom_point(color = palette_light()[[1]]) +
# Predictions
geom_line(aes(y = value), color = palette_light()[[4]], data = predictions_tbl) +
geom_point(aes(y = value), color = palette_light()[[4]], data = predictions_tbl) +
# Actuals
geom_line(aes_string(y = paste0(my_track)), color = palette_light()[[3]], data = actuals_tbl) +
geom_point(aes_string(y = paste0(my_track)), color = palette_light()[[3]], data = actuals_tbl) +
#theme_tq() +
labs(title = "Time series sum data")
ggplotly(p)
output$plot61 <- renderPlotly(ggplotly(p))
lm
as.formula(paste("y~", paste(factors, collapse="+")))
as.formula(paste("y~", paste(" ... ", collapse="+")))
as.formula(paste("y~", paste(".", collapse="+")))
runApp()
nn
fit_lm <-lm(as.formula(paste0(my_track," ~ ", paste(".", collapse="+"))), data = select(beer_sales_tbl_aug, -c(Index, diff, month.lbl)))
fit_lm <-lm(as.formula(paste0(my_track," ~ ", paste(".", collapse="+"))), data = select(beer_sales_tbl_aug, -c(Index, diff, month.lbl)))
as.formula(paste0(my_track," ~ ", paste(".", collapse="+")))
as.formula(paste0(my_track," ~ ", paste(".", collapse="+")))
as.formula(paste0(my_track," ~ ", paste(".", collapse="+")))
as.formula(paste0(my_track," ~ ", paste(".", collapse="+")))
as.formula(paste0(my_track," ~ ", paste(".", collapse="+")))
as.formula(paste0(my_track," ~ ", paste(".", collapse="+")))
as.formula(paste0(my_track," ~ ", paste(".", collapse="+")))
data=as.formula(paste0(my_track," ~ ", paste(".", collapse="+")))
data
expr=as.formula(paste0(my_track," ~ ", paste(".", collapse="+")))
fit_lm <-lm(expr=expr, data = select(beer_sales_tbl_aug, -c(Index, diff, month.lbl)))
lmx=as.formula(paste0(my_track," ~ ", paste(".", collapse="+")))
fit_lm <-lm(lmx, data = select(beer_sales_tbl_aug, -c(Index, diff, month.lbl)))
lmx=as.formula(paste0(my_track," ~ ", paste(".", collapse="+")))
fit_lm <-lm(lmx, data = select(beer_sales_tbl_aug, -c(Index, diff, month.lbl)))
summary(fit_lm)
beer_sales_idx <- SUM_DATA %>% tk_index()
tail(beer_sales_idx)
Sys.setenv(TZ = "America/Toronto")
# Make future index
future_idx <- beer_sales_idx %>%
tk_make_future_timeseries(n_future = 10)
future_idx
new_data_tbl <- future_idx %>%
tk_get_timeseries_signature()
new_data_tbl
tryCatch({
# Make predictions
pred <-predict(fit_lm, newdata = select(new_data_tbl, -c(index, diff)))
}, warning = function(cond) {
message(paste(cond))
}, error = function(cond) {
message(paste(cond))
})
tryCatch({
predictions_tbl <- tibble(Index  = future_idx,
value = pred)
}, warning = function(cond) {
message(paste(cond))
}, error = function(cond) {
message(paste(cond))
})
predictions_tbl
split <- round(nrow(SUM_DATA) * .90)
datat_to <- SUM_DATA[1:split,]
actuals_tbl <- SUM_DATA[(split + 1):nrow(SUM_DATA),]
#colnames(actuals_tbl)[2] <- "value"
p <- ggplot(SUM_DATA, aes_string(x = paste0("Index"), y = paste0(my_track))) +
# Training data
geom_line(color = palette_light()[[1]]) +
geom_point(color = palette_light()[[1]]) +
# Predictions
geom_line(aes(y = value), color = palette_light()[[4]], data = predictions_tbl) +
geom_point(aes(y = value), color = palette_light()[[4]], data = predictions_tbl) +
# Actuals
geom_line(aes_string(y = paste0(my_track)), color = palette_light()[[3]], data = actuals_tbl) +
geom_point(aes_string(y = paste0(my_track)), color = palette_light()[[3]], data = actuals_tbl) +
#theme_tq() +
labs(title = "Time series sum data")
ggplotly(p)
runApp()
runApp()
runApp()
runApp()
left_join(actuals_tbl, predictions_tbl)
left_join(actuals_tbl, predictions_tbl)
rename_(actual = paste0(my_track), pred = value) %>%
mutate(error     = actual - pred,
error_pct = error / actual)
error_tbl <- left_join(actuals_tbl, predictions_tbl) %>%
rename_(actual = paste0(my_track), pred = value) %>%
mutate(error     = actual - pred,
error_pct = error / actual)
rename_(actual = paste0(my_track), pred = value)
error_tbl <- left_join(actuals_tbl, predictions_tbl) %>%
rename_(actual = paste0(my_track), pred = paste0(value)) %>%
mutate(error     = actual - pred,
error_pct = error / actual)
error_tbl <- left_join(actuals_tbl, predictions_tbl) %>%
rename_(actual = paste0(my_track)) %>%
mutate(error     = actual - pred,
error_pct = error / actual)
error_tbl
SUM_DATA <- pac[,c(1,31)]
SUM_DATA %>%
tk_index() %>%
tk_get_timeseries_summary() %>%
glimpse()
beer_sales_tbl_aug <- SUM_DATA %>%
tk_augment_timeseries_signature()
beer_sales_tbl_aug
beer_sales_tbl_aug<-na.omit(beer_sales_tbl_aug)
(l <- sapply(beer_sales_tbl_aug, function(x) is.factor(x)))
m <- beer_sales_tbl_aug[, l]
ifelse(n <- sapply(m, function(x) length(levels(x))) == 1, "DROP", "NODROP")
fit_lm <- lm(SUM~ ., data = select(beer_sales_tbl_aug, -c(Index, diff,month.lbl)))
summary(fit_lm)
#na.omit(fit_lm)
beer_sales_idx <- SUM_DATA %>%
tk_index()
tail(beer_sales_idx)
Sys.setenv(TZ = "America/Toronto")
# Make future index
future_idx <- beer_sales_idx %>%
tk_make_future_timeseries(n_future =10)
future_idx
new_data_tbl <- future_idx %>%
tk_get_timeseries_signature()
new_data_tbl
# Make predictions
pred <- predict(fit_lm, newdata = select(new_data_tbl, -c(index, diff)))
predictions_tbl <- tibble(
Index  = future_idx,
value = pred
)
predictions_tbl
split <- round(nrow(SUM_DATA) * .90)
datat_to <- SUM_DATA[1:split,]
actuals_tbl <- SUM_DATA[(split + 1):nrow(SUM_DATA),]
#colnames(actuals_tbl)[2] <- "value"
p<-ggplot(SUM_DATA,aes(x=Index,y=SUM))+
# Training data
geom_line(color = palette_light()[[1]]) +
geom_point(color = palette_light()[[1]])+
# Predictions
geom_line(aes(y = value), color = palette_light()[[4]], data = predictions_tbl) +
geom_point(aes(y = value), color = palette_light()[[4]], data = predictions_tbl)+
# Actuals
geom_line(aes(y = SUM),color = palette_light()[[3]], data = actuals_tbl) +
geom_point(aes(y = SUM),color = palette_light()[[3]], data = actuals_tbl)+
#theme_tq() +
labs(title = "Time series sum data")
ggplotly(p)
error_tbl <- left_join(actuals_tbl, predictions_tbl) %>%
rename(actual = SUM, pred = value) %>%
mutate(
error     = actual - pred,
error_pct = error / actual
)
error_tbl
actuals_tbl
predictions_tbl
value
value
runApp()
output$table62<-DT::renderDataTable({error_tbl})
runApp()
nn
error_tbl
output$table62<-DT::renderDataTable({error_tbl})
output$table62 <- DT::renderDataTable({error_tbl})
output$table62 <- DT::renderDataTable({error_tbl})
output$table62 <- DT::renderDataTable({error_tbl})
output$table62 <- DT::renderDataTable({error_tbl})
output$table62 <- DT::renderDataTable({error_tbl})
output$table62 <- DT::renderDataTable({error_tbl})
output$table62 <- DT::renderDataTable({error_tbl})
output$table62 <- DT::renderDataTable({error_tbl})
output$table62 <- DT::renderDataTable({error_tbl})
output$table62 <- DT::renderDataTable({error_tbl})
output$table62 <- DT::renderDataTable({error_tbl})
output$table62 <- DT::renderDataTable({error_tbl})
output$table62 <- DT::renderDataTable({error_tbl})
output$table62 <- DT::renderDataTable({error_tbl})
output$table62 <- DT::renderDataTable({error_tbl})
output$table62 <- DT::renderDataTable({error_tbl})
output$table63 <- DT::renderDataTable({error_tbl})
runApp()
runApp()
runApp()
runApp()
DT::renderDataTable({error_tbl
}
)
runApp()
runApp()
datatable(error_tbl)
runApp()
runApp()
runApp()
runApp()
runApp()
