{
    "collab_server" : "",
    "contents" : "## Lib.R ##\nlibrary(DT)\nlibrary(readr)\nlibrary(plotly)\nlibrary(stringr)\nlibrary(DataLoader)\nlibrary(forecast)\nlibrary(tseries)\nlibrary(zoo)\nlibrary(xts)\nlibrary(fts)\nlibrary(MASS)\nlibrary(caret)\nlibrary(e1071)\nlibrary(dplyr)\nlibrary(h2o)        # Awesome ML Library\nlibrary(timetk)     # Toolkit for working with time series in R\nlibrary(tidyquant)\nlibrary(anomalyDetection)\nlibrary(TSMining)\nlibrary(randomForest)\n#install.packages(\"devtools\")\n#devtools::install_github(\"twitter/AnomalyDetection\")\nlibrary(AnomalyDetection)\npackageVersion('plotly')\n#devtools::install_github(\"tidyverse/ggplot2\")\n#devtools::install_github('hadley/ggplot2')\nlibrary(ggplot2)\n\n\n## Linear Regression ##\n\n\n#====================================timetk + linear regression: MAPE = 4.3% (timetk demo)==================================\n\n\nSUM_DATA <- pac[,c(1,31)]\n\nSUM_DATA %>%\n  tk_index() %>%\n  tk_get_timeseries_summary() %>%\n  glimpse()\n\nbeer_sales_tbl_aug <- SUM_DATA %>%\n  tk_augment_timeseries_signature()\n\nbeer_sales_tbl_aug\nbeer_sales_tbl_aug<-na.omit(beer_sales_tbl_aug)\n\n(l <- sapply(beer_sales_tbl_aug, function(x) is.factor(x)))\nm <- beer_sales_tbl_aug[, l]\nifelse(n <- sapply(m, function(x) length(levels(x))) == 1, \"DROP\", \"NODROP\")\n\nfit_lm <- lm(SUM~ ., data = select(beer_sales_tbl_aug, -c(Index, diff,month.lbl)))\n\nsummary(fit_lm)\n#na.omit(fit_lm)\n\nbeer_sales_idx <- SUM_DATA %>%\n  tk_index()\n\ntail(beer_sales_idx)\n\nSys.setenv(TZ = \"America/Toronto\")\n# Make future index\nfuture_idx <- beer_sales_idx %>%\n  tk_make_future_timeseries(n_future =10)\n\nfuture_idx\n\nnew_data_tbl <- future_idx %>%\n  tk_get_timeseries_signature()\n\nnew_data_tbl\n\n# Make predictions\npred <- predict(fit_lm, newdata = select(new_data_tbl, -c(index, diff)))\npredictions_tbl <- tibble(\n  Index  = future_idx,\n  value = pred\n)\n\npredictions_tbl\n\n\nsplit <- round(nrow(SUM_DATA) * .90)\ndatat_to <- SUM_DATA[1:split,]\nactuals_tbl <- SUM_DATA[(split + 1):nrow(SUM_DATA),]\n#colnames(actuals_tbl)[2] <- \"value\"\n\n\np<-ggplot(SUM_DATA,aes(x=Index,y=SUM))+\n  # Training data\n  geom_line(color = palette_light()[[1]]) +\n  geom_point(color = palette_light()[[1]])+\n  # Predictions\n  geom_line(aes(y = value), color = palette_light()[[4]], data = predictions_tbl) +\n  geom_point(aes(y = value), color = palette_light()[[4]], data = predictions_tbl)+ \n  # Actuals\n  geom_line(aes(y = SUM),color = palette_light()[[3]], data = actuals_tbl) +\n  geom_point(aes(y = SUM),color = palette_light()[[3]], data = actuals_tbl)+\n  #theme_tq() +\n  labs(title = \"Time series sum data\")\nggplotly(p) \n\nerror_tbl <- left_join(actuals_tbl, predictions_tbl) %>%\n  rename(actual = SUM, pred = value) %>%\n  mutate(\n    error     = actual - pred,\n    error_pct = error / actual\n  ) \nerror_tbl\n\n# Calculating test error metrics\ntest_residuals <- error_tbl$error\ntest_error_pct <- error_tbl$error_pct * 100 # Percentage error\n\nme   <- mean(test_residuals, na.rm=TRUE)\nrmse <- mean(test_residuals^2, na.rm=TRUE)^0.5\nmae  <- mean(abs(test_residuals), na.rm=TRUE)\nmape <- mean(abs(test_error_pct), na.rm=TRUE)\nmpe  <- mean(test_error_pct, na.rm=TRUE)\n\ntibble(me, rmse, mae, mape, mpe) %>% glimpse()\n\n\n\n# Coerce to xts\nbeer_sales_xts <- tk_xts(SUM_DATA) \n\n# Show the first six rows of the xts object\nbeer_sales_xts %>%\n  head()\ntk_tbl(beer_sales_xts, rename_index = \"date\")\n\n# Coerce to ts\nbeer_sales_ts <- tk_ts(SUM_DATA)\n\n# Show the calendar-printout\nbeer_sales_ts\ntk_tbl(beer_sales_ts, rename_index = \"date\")\n\nhas_timetk_idx(beer_sales_ts)\n\n# If timetk_idx is present, can get original dates back \ntk_tbl(beer_sales_ts, timetk_idx = TRUE, rename_index = \"date\")\n",
    "created" : 1523029472588.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3545163676",
    "id" : "81DC7975",
    "lastKnownWriteTime" : 1523032083,
    "last_content_update" : 1523032083859,
    "path" : "~/fiverr/Rshiny/LinearReression.R",
    "project_path" : "LinearReression.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 12,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}