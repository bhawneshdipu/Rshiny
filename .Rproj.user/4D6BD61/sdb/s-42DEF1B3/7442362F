{
    "collab_server" : "",
    "contents" : "#1. GetMyData.R -> filename ==> data1\n#2. Preprocessing -> data,channel ==> data1\n#3. Aggregation ->data,channel,filename,aggregater ==> pac\nsource(\"Lib.R\")\nsource(\"GetMyData.R\")\nsource(\"Preprocessing.R\")\nsource(\"Aggregation.R\")\nsource(\"MyPlots.R\")\nsource(\"MyFunctions.R\")\n\nserver <- function(input, output,session) {\n  output$sectortable <- renderTable({\n    \n      data<-c(\"SC1_MEJA k. Mengusovce - k. PP Západ\",\n              \"SC2_MEJA k. PP Západ - k. Vysoké Tatry\",\n              \"SC3_MEJA k. Vysoké Tatry - k. PP Východ\",\n              \"SC4_MEJA k. PP Východ - k. Spišský Štvrtok\",\n              \"SC5_JAJA k. Spišský Štvrtok - k. Levoča\"\n      )\n      matrix <- matrix(data,nrow=5,ncol=1)\n      colnames(matrix) <- c('Files')\n      matrix\n    },striped = TRUE,hover = TRUE,bordered = TRUE,spacing = c(\"l\"),width = \"auto\"\n  )\n  \n  \n  graphics.off()\n  pdf(NULL)\n  ##=================== Dashboard======================== ##\n  observeEvent(\n    input$selectfile,{\n      dipu.dashboard(input,output)\n    },ignoreInit = TRUE)\n  \n  observeEvent(\n    input$selectchannel,{\n      dipu.dashboard(input,output)\n    },ignoreInit = TRUE)\n  observeEvent(\n    input$selectdataset,{\n      dipu.dashboard(input,output)\n    },ignoreInit = TRUE)\n  observeEvent(\n    input$selectdataaggregation,{\n      dipu.dashboard(input,output)\n    },ignoreInit = TRUE)\n  observeEvent(\n    input$daterange,{\n      dipu.dashboard(input,output)\n    },ignoreInit = TRUE)\n  \n  ##======================= Box Plot ===============================##\n  choices = setNames(colnames(pac),colnames(pac))\n  updateSelectInput(session,\"selectboxploty\",\"Select Y:\",choices=choices)\n  updateSelectInput(session,\"selectboxplotx\",\"Select X:\",choices=choices)\n  \n  \n  \n  observeEvent(\n    input$selectcolor,{\n      dipu.boxplot(input,output,session)\n    },ignoreInit = TRUE)\n  observeEvent(\n    input$selectboxploty,{\n      dipu.boxplot(input,output,session)\n    },ignoreInit = TRUE)\n  observeEvent(\n    input$selectboxplotx,{\n      dipu.boxplot(input,output,session)\n    },ignoreInit = TRUE)\n  \n  ##=============================== Anomaly Detection========================= ##\n  choices = setNames(colnames(pac),colnames(pac))\n  updateSelectInput(session,\"selectanomalyx\",\"Select X:\",choices=choices,selected=\"Index\")\n  updateSelectInput(session,\"selectanomalyy\",\"Select Y:\",choices=choices,selected=\"SP11\")\n  \n  observeEvent(\n    input$selectlastonly,{\n      dipu.anomalydetection(input,output,session)\n    },ignoreInit = TRUE)\n  \n  observeEvent(\n    input$selectanomalyx,{\n      dipu.anomalydetection(input,output,session)\n    },ignoreInit = TRUE)\n  \n  observeEvent(\n    input$selectanomalyy,{\n      dipu.anomalydetection(input,output,session)\n    },ignoreInit = TRUE)\n  \n  observeEvent(\n    input$selectperiod,{\n      dipu.anomalydetection(input,output,session)\n    },ignoreInit = TRUE)\n  \n  #==================================Motif discovery=======================================\n  choices = setNames(colnames(pac),colnames(pac))\n  updateSelectInput(session,\"selectmotifx\",\"Select X:\",choices=choices,selected=\"SP12\")\n  updateSelectInput(session,\"selectmotify\",\"Select Y:\",choices=choices,selected=\"SP11\")\n  \n  observeEvent(\n    input$selectmotifx,{\n      dipu.motifdiscovery(input,output,session)\n    },ignoreInit = TRUE)\n  \n  observeEvent(\n    input$selectmotify,{\n      dipu.motifdiscovery(input,output,session)\n    },ignoreInit = TRUE)\n  \n  #=========================MACHINE LEARNING========================\n  observeEvent(\n    input$machinelearningslider,{\n      dipu.machinelearning(input,output,session)\n    },ignoreInit = FALSE)\n  \n  \n  \n  #====================================timetk + linear regression: MAPE = 4.3% (timetk demo)==================================\n  \n  observeEvent(\n    input$linearregressionslider,{\n      dipu.linearregression(input,output,session)\n    },ignoreInit = FALSE)\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n    # output$plot11 <- renderPlotly({\n    #   \n    #   \n    #   SUM_DATA <- pac[,c(1,31)]\n    #   \n    #   SUM_DATA %>%\n    #     tk_index() %>%\n    #     tk_get_timeseries_summary() %>%\n    #     glimpse()\n    #   \n    #   beer_sales_tbl_aug <- SUM_DATA %>%\n    #     tk_augment_timeseries_signature()\n    #   \n    #   beer_sales_tbl_aug\n    #   beer_sales_tbl_aug<-na.omit(beer_sales_tbl_aug)\n    #   \n    #   (l <- sapply(beer_sales_tbl_aug, function(x) is.factor(x)))\n    #   m <- beer_sales_tbl_aug[, l]\n    #   ifelse(n <- sapply(m, function(x) length(levels(x))) == 1, \"DROP\", \"NODROP\")\n    #   \n    #   fit_lm <- lm(SUM~ ., data = select(beer_sales_tbl_aug, -c(Index, diff,month.lbl)))\n    #   \n    #   summary(fit_lm)\n    #   #na.omit(fit_lm)\n    #   \n    #   beer_sales_idx <- SUM_DATA %>%\n    #     tk_index()\n    #   \n    #   tail(beer_sales_idx)\n    #   \n    #   # Make future index\n    #   future_idx <- beer_sales_idx %>%\n    #     tk_make_future_timeseries(n_future =10)\n    #   \n    #   future_idx\n    #   \n    #   new_data_tbl <- future_idx %>%\n    #     tk_get_timeseries_signature()\n    #   \n    #   new_data_tbl\n    #   \n    #   # Make predictions\n    #   pred <- predict(fit_lm, newdata = select(new_data_tbl, -c(index, diff)))\n    #   predictions_tbl <- tibble(\n    #     Index  = future_idx,\n    #     value = pred\n    #   )\n    #   \n    #   predictions_tbl\n    #   \n    #   \n    #   split <- round(nrow(SUM_DATA) * .90)\n    #   datat_to <- SUM_DATA[1:split,]\n    #   actuals_tbl <- SUM_DATA[(split + 1):nrow(SUM_DATA),]\n    #   #colnames(actuals_tbl)[2] <- \"value\"\n    #   \n    #   \n    #   p<-ggplot(SUM_DATA,aes(x=Index,y=SUM))+\n    #     # Training data\n    #     geom_line(color = palette_light()[[1]]) +\n    #     geom_point(color = palette_light()[[1]])+\n    #     # Predictions\n    #     geom_line(aes(y = value), color = palette_light()[[4]], data = predictions_tbl) +\n    #     geom_point(aes(y = value), color = palette_light()[[4]], data = predictions_tbl)+ \n    #     # Actuals\n    #     geom_line(aes(y = SUM),color = palette_light()[[3]], data = actuals_tbl) +\n    #     geom_point(aes(y = SUM),color = palette_light()[[3]], data = actuals_tbl)+\n    #     theme_tq() +\n    #     labs(title = \"Time series sum data\")\n    #   ggplotly(p) \n    #   \n    #   \n    # })\n    # \n  # output$plot1 <- renderPlotly({\n  #   img <- plot_ly(SUM_DATA, x = ~Index, y = ~SUM)%>%\n  #     add_trace(colors = \"orange\",name = \"Početnosť áut v čase\",mode = \"lines\")%>%\n  #     add_trace(y = ~pred, colors = \"gray\",name = \"Predikované hodnoty\", mode = \"lines+markers\", alpha = 1,data = error_tbl)%>%\n  #     layout(title = \"Graf\",\n  #            xaxis = list(title = \"Čas\",\n  #                         rangeslider = list(type = \"date\")),\n  #            yaxis = list(title = \"Početnosť áut\"))\n  #   (img)\n  #   \n  # })\n  # output$plot2 <- renderPlotly({\n  #   #pie plot by day of week\n  #   plot_ly(pac, labels = ~wday.lbl, values = ~SP10, type = 'pie',textposition = 'inside')%>%\n  #     layout(title = 'Kol??ov? graf')\n  # })\n  # \n  # output$plot3 <- renderPlot({\n  #   x <- ggplot(data1,aes(x = Date, y = data1$SUM,col = CHANNEL))+\n  #     geom_bar(stat = \"identity\",size = 3,alpha = 0.5,fill = \"blue\")\n  #   #ggplotly(x)\n  #   (x)\n  # })\n  # output$plot21 <- renderPlotly({\n  #   #Plot of aggregation by SpeedBins\n  #   plot_ly(pac, x = ~Index, y = ~SP1 , name = 'Number of cars in time aggregated')%>%\n  #     add_trace(y = ~SP1, name = '0-50km/h', mode = 'lines') %>%\n  #     add_trace(y = ~SP2, name = '50-60km/h', mode = 'lines') %>%\n  #     add_trace(y = ~SP3, name = '60-70km/h', mode = 'lines') %>%\n  #     add_trace(y = ~SP4, name = '70-80km/h', mode = 'lines') %>%\n  #     add_trace(y = ~SP5, name = '80-90km/h', mode = 'lines') %>%\n  #     add_trace(y = ~SP6, name = '90-100km/h', mode = 'lines') %>%\n  #     add_trace(y = ~SP7, name = '100-110km/h', mode = 'lines') %>%\n  #     add_trace(y = ~SP8, name = '110-120km/h', mode = 'lines') %>%\n  #     add_trace(y = ~SP9, name = '120-130km/h', mode = 'lines') %>%\n  #     add_trace(y = ~SP10, name = '130-140km/h', mode = 'lines') %>%\n  #     add_trace(y = ~SP11, name = '140-150km/h', mode = 'lines') %>%\n  #     add_trace(y = ~SP12, name = '150-160km/h', mode = 'lines') %>%\n  #     add_trace(y = ~SP13, name = '160-180km/h', mode = 'lines')%>%\n  #     add_trace(y = ~SP14, name = '180-999km/h', mode = 'lines')%>%\n  #     add_trace(y = ~SUM, name = 'TOTAL', mode = 'lines')\n  #   \n  # })\n  # output$plot22 <- renderPlotly({\n  #   #Plot of aggregation by LengthBins\n  #   plot_ly(pac, x = ~Index, y = ~LN1 , name = 'Number of cars in time aggregated')%>%\n  #     add_trace(y = ~LN1, name = '0-300 cm', mode = 'lines') %>%\n  #     #add_trace(y = ~LN2, name = '300-470 cm', mode = 'lines') %>%\n  #     add_trace(y = ~LN3, name = '470-550 cm', mode = 'lines') %>%\n  #     add_trace(y = ~LN4, name = '550-600 cm', mode = 'lines') %>%\n  #     add_trace(y = ~LN5, name = '600-1300 cm', mode = 'lines') %>%\n  #     add_trace(y = ~LN6, name = '1300-1800 cm', mode = 'lines') %>%\n  #     add_trace(y = ~LN7, name = '1800-2550 cm', mode = 'lines') %>%\n  #     add_trace(y = ~LN8, name = '2550-3600 cm', mode = 'lines') %>%\n  #     add_trace(y = ~LN9, name = '3600-9999 cm', mode = 'lines') \n  #   \n  # })\n  # output$plot31 <- renderPlotly({\n  #   \n  #   \n  #   SUM_DATA <- pac[,c(1,31)]\n  #   \n  #   SUM_DATA %>%\n  #     tk_index() %>%\n  #     tk_get_timeseries_summary() %>%\n  #     glimpse()\n  #   \n  #   beer_sales_tbl_aug <- SUM_DATA %>%\n  #     tk_augment_timeseries_signature()\n  #   \n  #   beer_sales_tbl_aug\n  #   beer_sales_tbl_aug<-na.omit(beer_sales_tbl_aug)\n  #   \n  #   (l <- sapply(beer_sales_tbl_aug, function(x) is.factor(x)))\n  #   m <- beer_sales_tbl_aug[, l]\n  #   ifelse(n <- sapply(m, function(x) length(levels(x))) == 1, \"DROP\", \"NODROP\")\n  #   \n  #   fit_lm <- lm(SUM~ ., data = select(beer_sales_tbl_aug, -c(Index, diff,month.lbl)))\n  #   \n  #   summary(fit_lm)\n  #   #na.omit(fit_lm)\n  #   \n  #   beer_sales_idx <- SUM_DATA %>%\n  #     tk_index()\n  #   \n  #   tail(beer_sales_idx)\n  #   \n  #   # Make future index\n  #   future_idx <- beer_sales_idx %>%\n  #     tk_make_future_timeseries(n_future =10)\n  #   \n  #   future_idx\n  #   \n  #   new_data_tbl <- future_idx %>%\n  #     tk_get_timeseries_signature()\n  #   \n  #   new_data_tbl\n  #   \n  #   # Make predictions\n  #   pred <- predict(fit_lm, newdata = select(new_data_tbl, -c(index, diff)))\n  #   predictions_tbl <- tibble(\n  #     Index  = future_idx,\n  #     value = pred\n  #   )\n  #   \n  #   predictions_tbl\n  #   \n  #   \n  #   split <- round(nrow(SUM_DATA) * .90)\n  #   datat_to <- SUM_DATA[1:split,]\n  #   actuals_tbl <- SUM_DATA[(split + 1):nrow(SUM_DATA),]\n  #   #colnames(actuals_tbl)[2] <- \"value\"\n  #   \n  #   \n  #   p<-ggplot(SUM_DATA,aes(x=Index,y=SUM))+\n  #     # Training data\n  #     geom_line(color = palette_light()[[1]]) +\n  #     geom_point(color = palette_light()[[1]])+\n  #     # Predictions\n  #     geom_line(aes(y = value), color = palette_light()[[4]], data = predictions_tbl) +\n  #     geom_point(aes(y = value), color = palette_light()[[4]], data = predictions_tbl)+ \n  #     # Actuals\n  #     geom_line(aes(y = SUM),color = palette_light()[[3]], data = actuals_tbl) +\n  #     geom_point(aes(y = SUM),color = palette_light()[[3]], data = actuals_tbl)+\n  #     theme_tq() +\n  #     labs(title = \"Time series sum data\")\n  #   ggplotly(p) \n  #   \n  #   \n  # })\n  # output$plot32 <- renderPlotly({\n  #   #Bar plot day of week\n  #   plot_ly(pac, x = ~wday.lbl, y = ~SP1, type = 'bar', name = \"0-50km/h\") %>%\n  #     add_trace(y = ~SP2, name = '50-60km/h', mode = 'lines') %>%\n  #     add_trace(y = ~SP3, name = '60-70km/h', mode = 'lines') %>%\n  #     add_trace(y = ~SP4, name = '70-80km/h', mode = 'lines') %>%\n  #     add_trace(y = ~SP5, name = '80-90km/h', mode = 'lines') %>%\n  #     add_trace(y = ~SP6, name = '90-100km/h', mode = 'lines') %>%\n  #     add_trace(y = ~SP7, name = '100-110km/h', mode = 'lines') %>%\n  #     add_trace(y = ~SP8, name = '110-120km/h', mode = 'lines') %>%\n  #     add_trace(y = ~SP9, name = '120-130km/h', mode = 'lines') %>%\n  #     add_trace(y = ~SP10, name = '130-140km/h', mode = 'lines') %>%\n  #     add_trace(y = ~SP11, name = '140-150km/h', mode = 'lines') %>%\n  #     add_trace(y = ~SP12, name = '150-160km/h', mode = 'lines') %>%\n  #     add_trace(y = ~SP13, name = '160-180km/h', mode = 'lines')%>%\n  #     add_trace(y = ~SP14, name = '180-999km/h', mode = 'lines')%>%\n  #     #add_trace(y = ~SUM, name = 'TOTAL', mode = 'lines')%>%\n  #     layout(title = \"Počty áuto podľa dni v týždni\",yaxis = list(title = 'Count'), barmode = 'group')\n  #   \n  #   \n  # })\n   \n}\n",
    "created" : 1522302047434.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3449648905",
    "id" : "7442362F",
    "lastKnownWriteTime" : 1522786721,
    "last_content_update" : 1522786721138,
    "path" : "~/fiverr/Rshiny/server.R",
    "project_path" : "server.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}