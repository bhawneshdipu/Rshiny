{
    "collab_server" : "",
    "contents" : "library(readr)\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(stringr)\nlibrary(DataLoader)\nlibrary(ggplot2)\nlibrary(forecast)\nlibrary(tseries)\nlibrary(zoo)\nlibrary(xts)\nlibrary(fts)\nlibrary(MASS)\nlibrary(caret)\nlibrary(e1071)\nlibrary(dplyr)\nlibrary(h2o)        # Awesome ML Library\nlibrary(timetk)     # Toolkit for working with time series in R\nlibrary(tidyquant)\nlibrary(sweep) \nlibrary(lubridate)\n\n\n\n\n#====================================timetk + h2o: MAPE = 3.9% (This demo)==================================\n\n\n\n\n\n#beer_sales_tbl <- tq_get(\"S4248SM144NCEN\", get = \"economic.data\", from = \"2010-01-01\", to = \"2017-10-27\")\n\nSUM_DATA <- pac[,c(1,31)]\n\nSUM_DATA %>% glimpse()\nbeer_sales_tbl_aug <- SUM_DATA %>%\n  tk_augment_timeseries_signature()\n\nbeer_sales_tbl_aug %>% glimpse()\n\nbeer_sales_tbl_clean <- beer_sales_tbl_aug %>%\n  select_if(~ !is.POSIXct(.)) %>%\n  select_if(~ !any(is.na(.))) %>%\n  mutate_if(is.ordered, ~ as.character(.) %>% as.factor)\n\nbeer_sales_tbl_clean %>% glimpse()\nbeer_sales_tbl_clean[,1] <- as.integer(beer_sales_tbl_clean$SUM)\n#beer_sales_tbl_clean$month.lbl <- NULL\n#beer_sales_tbl_clean$wday.lbl <- NULL\nsplit <- round(nrow(beer_sales_tbl_clean) * .70)\ndatat_to <- beer_sales_tbl_clean[1:split,]\nactuals_tbl <- beer_sales_tbl_clean[(split + 1):nrow(beer_sales_tbl_clean),]\nsplit2 <- round(nrow(actuals_tbl) * .66)\ndata_beet <- actuals_tbl[1:split2,]\ndata_end <- actuals_tbl[(split2 + 1):nrow(actuals_tbl),]\n\n\n\ntrain_tbl <- datat_to\nvalid_tbl <- data_beet\ntest_tbl  <- data_end\n\n\nh2o.init()\nh2o.no_progress()\ntrain_h2o <- as.h2o(train_tbl)\nvalid_h2o <- as.h2o(valid_tbl)\ntest_h2o  <- as.h2o(test_tbl)\n\ny <- \"SUM\"\nx <- setdiff(names(train_h2o), y)\n\n# linear regression model used, but can use any model\nautoml_models_h2o <- h2o.automl(\n  x = x, \n  y = y, \n  training_frame = train_h2o, \n  validation_frame = valid_h2o, \n  leaderboard_frame = test_h2o, \n  max_runtime_secs = 60, \n  stopping_metric = \"deviance\")\n\nautoml_leader <- automl_models_h2o@leader\n\npred_h2o <- h2o.predict(automl_leader, newdata = test_h2o)\n\nh2o.performance(automl_leader, newdata = test_h2o)\n\n\n\n\nerror_tbl <- SUM_DATA %>% \n  tail(SUM_DATA,n=sum(nrow(data_end)))%>% \n  add_column(pred = pred_h2o %>% as.tibble() %>% pull(predict)) %>%\n  rename(actual = SUM) %>%\n  mutate(\n    error     = actual - pred,\n    error_pct = error / actual\n  ) \nerror_tbl\n\n\nerror_tbl %>%\n  summarise(\n    me   = mean(error),\n    rmse = mean(error^2)^0.5,\n    mae  = mean(abs(error)),\n    mape = mean(abs(error_pct)),\n    mpe  = mean(error_pct)\n  ) %>%\n  glimpse()\n\n\n\n\n\n\np<-SUM_DATA %>%\n  ggplot(aes(x = Index, y = SUM)) +\n  # Data - Spooky Orange\n  geom_point(size = 2, color = \"gray\", alpha = 0.5, shape = 21, fill = \"orange\") +\n  geom_line(color = \"orange\", size = 0.5) +\n  geom_ma(n = 1, color = \"black\")+ \n  # Predictions - Spooky Purple\n  geom_point(aes(y = pred), size = 2, color = \"gray\", alpha = 1, shape = 21, fill = \"purple\", data = error_tbl) +\n  geom_line(aes(y = pred), color = \"purple\", size = 0.5, data = error_tbl) +\n  # Aesthetics\n  \n  labs(\n    title = \"Graf\",\n    subtitle = \"Algotimus H2O mal najvyššiu prestnosť MAPE:9,6%\"\n  )\nggplotly(p)\n\nplot_ly(SUM_DATA, x = ~Index, y = ~SUM)%>%\n  add_trace(colors = \"orange\",name = \"Početnosť áut v čase\",mode = \"lines\")%>%\n  add_trace(y = ~pred, colors = \"gray\",name = \"Predikované hodnoty\", mode = \"lines+markers\", alpha = 1,data = error_tbl)%>%\n  layout(title = \"Graf\",\n    xaxis = list(title = \"Čas\",\n      rangeslider = list(type = \"date\")),\n    yaxis = list(title = \"Početnosť áut\"))\n  \n  \n  \n  \n\n\n#====================================timetk + linear regression: MAPE = 4.3% (timetk demo)==================================\n\n\nSUM_DATA <- pac[,c(1,31)]\n\nSUM_DATA %>%\n  tk_index() %>%\n  tk_get_timeseries_summary() %>%\n  glimpse()\n\nbeer_sales_tbl_aug <- SUM_DATA %>%\n  tk_augment_timeseries_signature()\n\nbeer_sales_tbl_aug\nbeer_sales_tbl_aug<-na.omit(beer_sales_tbl_aug)\n\n(l <- sapply(beer_sales_tbl_aug, function(x) is.factor(x)))\nm <- beer_sales_tbl_aug[, l]\nifelse(n <- sapply(m, function(x) length(levels(x))) == 1, \"DROP\", \"NODROP\")\n\nfit_lm <- lm(SUM~ ., data = select(beer_sales_tbl_aug, -c(Index, diff,month.lbl)))\n\nsummary(fit_lm)\n#na.omit(fit_lm)\n\nbeer_sales_idx <- SUM_DATA %>%\n  tk_index()\n\ntail(beer_sales_idx)\n\n# Make future index\nfuture_idx <- beer_sales_idx %>%\n  tk_make_future_timeseries(n_future =10)\n\nfuture_idx\n\nnew_data_tbl <- future_idx %>%\n  tk_get_timeseries_signature()\n\nnew_data_tbl\n\n# Make predictions\npred <- predict(fit_lm, newdata = select(new_data_tbl, -c(index, diff)))\npredictions_tbl <- tibble(\n  Index  = future_idx,\n  value = pred\n)\n\npredictions_tbl\n\n\nsplit <- round(nrow(SUM_DATA) * .90)\ndatat_to <- SUM_DATA[1:split,]\nactuals_tbl <- SUM_DATA[(split + 1):nrow(SUM_DATA),]\n#colnames(actuals_tbl)[2] <- \"value\"\n\n\np<-ggplot(SUM_DATA,aes(x=Index,y=SUM))+\n  # Training data\n  geom_line(color = palette_light()[[1]]) +\n  geom_point(color = palette_light()[[1]])+\n  # Predictions\n  geom_line(aes(y = value), color = palette_light()[[4]], data = predictions_tbl) +\n  geom_point(aes(y = value), color = palette_light()[[4]], data = predictions_tbl)+ \n  # Actuals\n  geom_line(aes(y = SUM),color = palette_light()[[3]], data = actuals_tbl) +\n  geom_point(aes(y = SUM),color = palette_light()[[3]], data = actuals_tbl)+\n  theme_tq() +\n  labs(title = \"Time series sum data\")\nggplotly(p) \n\nerror_tbl <- left_join(actuals_tbl, predictions_tbl) %>%\n  rename(actual = SUM, pred = value) %>%\n  mutate(\n    error     = actual - pred,\n    error_pct = error / actual\n  ) \nerror_tbl\n\n# Calculating test error metrics\ntest_residuals <- error_tbl$error\ntest_error_pct <- error_tbl$error_pct * 100 # Percentage error\n\nme   <- mean(test_residuals, na.rm=TRUE)\nrmse <- mean(test_residuals^2, na.rm=TRUE)^0.5\nmae  <- mean(abs(test_residuals), na.rm=TRUE)\nmape <- mean(abs(test_error_pct), na.rm=TRUE)\nmpe  <- mean(test_error_pct, na.rm=TRUE)\n\ntibble(me, rmse, mae, mape, mpe) %>% glimpse()\n\n\n\n# Coerce to xts\nbeer_sales_xts <- tk_xts(SUM_DATA) \n\n# Show the first six rows of the xts object\nbeer_sales_xts %>%\n  head()\ntk_tbl(beer_sales_xts, rename_index = \"date\")\n\n# Coerce to ts\nbeer_sales_ts <- tk_ts(SUM_DATA)\n\n# Show the calendar-printout\nbeer_sales_ts\ntk_tbl(beer_sales_ts, rename_index = \"date\")\n\nhas_timetk_idx(beer_sales_ts)\n\n# If timetk_idx is present, can get original dates back \ntk_tbl(beer_sales_ts, timetk_idx = TRUE, rename_index = \"date\")\n\n\n#====================================ARIMA + sweep: MAPE = 4.3% (sweep demo)==================================\n\n\n\nSUM_DATA <- pac[,c(1,31)]\nSUM_DATA %>%\n  ggplot(aes(Index, SUM)) +\n  geom_line(col = palette_light()[1]) +\n  geom_point(col = palette_light()[1]) +\n  geom_ma(ma_fun = SMA, n = 12, size = 1) +\n  theme_tq() +\n  labs(title = \"Beer Sales: 2007 through 2016\")\n\n\nbeer_sales_ts <- tk_ts(SUM_DATA)\nbeer_sales_ts\nhas_timetk_idx(beer_sales_ts)\nfit_arima <- auto.arima(beer_sales_ts)\n\nfit_arima\n# sw_tidy - Get model coefficients\nsw_tidy(fit_arima)\n# sw_glance - Get model description and training set accuracy measures\nsw_glance(fit_arima) %>%\n  glimpse()\n\n# sw_augment - get model residuals\nsw_augment(fit_arima, timetk_idx = TRUE)\n\nsw_augment(fit_arima, timetk_idx = TRUE) %>%\n  ggplot(aes(x = index, y = .resid)) +\n  geom_point() + \n  geom_hline(yintercept = 0, color = \"red\") + \n  labs(title = \"Residual diagnostic\") +\n  theme_tq()\n\n# Forecast next 12 months\nfcast_arima <- forecast(fit_arima, h = 100)\nclass(fcast_arima)\n\n# Check if object has timetk index \nhas_timetk_idx(fcast_arima)\n\n# sw_sweep - tidies forecast output\nfcast_tbl <- sw_sweep(fcast_arima, timetk_idx = TRUE)\n\nfcast_tbl\n\n\n\n\n# Visualize the forecast with ggplot\nfcast_tbl %>%\n  ggplot(aes(x = index, y = SUM, color = key)) +\n  # 95% CI\n  geom_ribbon(aes(ymin = lo.95, ymax = hi.95), \n              fill = \"#D5DBFF\", color = NA, size = 0) +\n  # 80% CI\n  geom_ribbon(aes(ymin = lo.80, ymax = hi.80, fill = key), \n              fill = \"#596DD5\", color = NA, size = 0, alpha = 0.8)+\n  # Prediction\n  geom_line() +\n  geom_point() +\n  # Actuals\n  geom_line(aes(x = Index, y = SUM), color = palette_light()[[1]], data = actuals_tbl) +\n  geom_point(aes(x = Index, y = SUM), color = palette_light()[[1]], data = actuals_tbl)+ \n  # Aesthetics\n  labs(title = \"Beer Sales Forecast: ARIMA\", x = \"\", y = \"Thousands of Tons\",\n       subtitle = \"sw_sweep tidies the auto.arima() forecast output\") +\n  scale_color_tq() +\n  scale_fill_tq() +\n  theme_tq()\n\n\n\n\n\nrror_tbl <- left_join(actuals_tbl, fcast_tbl, by = c(\"Index\" = \"index\"))%>% \n  rename(actual = SUM.x, pred = SUM.y) %>%\n  select(Index, actual, pred) %>%\n  mutate(\n    error     = actual - pred,\n    error_pct = error / actual\n  ) \nerror_tbl\nna.omit(error_tbl)\n# Calculate test error metrics\ntest_residuals <- error_tbl$error\ntest_error_pct <- error_tbl$error_pct * 100 # Percentage error\n\nme   <- mean(test_residuals, na.rm=TRUE)\nrmse <- mean(test_residuals^2, na.rm=TRUE)^0.5\nmae  <- mean(abs(test_residuals), na.rm=TRUE)\nmape <- mean(abs(test_error_pct), na.rm=TRUE)\nmpe  <- mean(test_error_pct, na.rm=TRUE)\n\ntibble(me, rmse, mae, mape, mpe) %>% glimpse()\n\n",
    "created" : 1522785753042.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1948562979",
    "id" : "723DEC56",
    "lastKnownWriteTime" : 1522341392,
    "last_content_update" : 1522341392,
    "path" : "~/fiverr/Rshiny/ML_TS.r",
    "project_path" : "ML_TS.r",
    "properties" : {
    },
    "relative_order" : 10,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}