{
    "collab_server" : "",
    "contents" : "library(readr)\nlibrary(plotly)\nlibrary(stringr)\nlibrary(DataLoader)\nlibrary(forecast)\nlibrary(tseries)\nlibrary(zoo)\nlibrary(xts)\nlibrary(fts)\nlibrary(MASS)\nlibrary(caret)\nlibrary(e1071)\nlibrary(dplyr)\n#library(h2o)        # Awesome ML Library\nlibrary(timetk)     # Toolkit for working with time series in R\nlibrary(tidyquant)\n\nlibrary(anomalyDetection)\nlibrary(TSMining)\n#install.packages(\"devtools\")\n\ndevtools::install_github(\"twitter/AnomalyDetection\")\nlibrary(anomalyDetection)\npackageVersion('plotly')\n#devtools::install_github(\"tidyverse/ggplot2\")\n#devtools::install_github('hadley/ggplot2')\nlibrary(ggplot2)\n# path to folder that holds multiple .csv files\n#folder <- \"C:/Users/USER/Documents/DP/Dataframe_Script/same_date/\"      \nfolder <- \"./\"\nfile_list <- list.files(path=folder, pattern=\"*.csv\") # create list of all .csv files in folder\n# read in each .csv file in file_list and rbind them into a data frame called data1 \ndata1 <- \n  do.call(\"rbind\", \n          lapply(file_list, \n                 function(x) \n                   read_csv(paste(folder, x, sep=''))))\n\n\n#====================Preprocesing===============================\n#chnge format of Date\ndata1$Date_Time <- data1$Date\ndata1$Date_Time <- do.call(paste,c(data1[c(\"Date_Time\",\"Time\")],sep = \"\"))\ndata1$Date_Time <- as.POSIXct(data1$Date_Time,format = \"%d%m%y%H%M\")\n#data1$Date_Time <- as.Date(data1$Date_Time, \"%d%m%y%H%M\")\n#data1$Date <- as.POSIXct(data1$Date,format = \"%d%m%y\")\ndata1<-data1[,c(ncol(data1),1:(ncol(data1)-1))]\n\n\n\n#Add \":\" in time\ndata1$Time <- sub(\"(.{2})(.*)\", \"\\\\1:\\\\2\", data1$Time)\n\n\n#Necessarily Columns as.factor\ndata1$CHANNEL <- as.numeric(data1$CHANNEL)\ndata1$LOCATION <- as.factor(data1$LOCATION)\ndata1$SITE <- as.factor(data1$SITE)\ndata1$FILENAME <- as.factor(data1$FILENAME)\ndata1$INSTRUMENT <- as.factor(data1$INSTRUMENT)\ndata1$HEADINGS <- as.factor(data1$HEADINGS)\n#data1$Time <- as.numeric(data1$Time)\n#set measured data as numeric\ndata1$SP1 = as.numeric(data1$SP1)\ndata1$SP2 = as.numeric(data1$SP2) \ndata1$SP3 = as.numeric(data1$SP3) \ndata1$SP4 = as.numeric(data1$SP4) \ndata1$SP5 = as.numeric(data1$SP5) \ndata1$SP6 = as.numeric(data1$SP6) \ndata1$SP7 = as.numeric(data1$SP7)\ndata1$SP8 = as.numeric(data1$SP8) \ndata1$SP9 = as.numeric(data1$SP9) \ndata1$SP10 = as.numeric(data1$SP10) \ndata1$SP11 = as.numeric(data1$SP11)\ndata1$SP12 = as.numeric(data1$SP12) \ndata1$SP13 = as.numeric(data1$SP13) \ndata1$SP14 = as.numeric(data1$SP14) \n\ndata1$LN1 = as.numeric(data1$LN1)\ndata1$LN2 = as.numeric(data1$LN2)\ndata1$LN3 = as.numeric(data1$LN3)\ndata1$LN4 = as.numeric(data1$LN4)\ndata1$LN5 = as.numeric(data1$LN5)\ndata1$LN6 = as.numeric(data1$LN6)\ndata1$LN7 = as.numeric(data1$LN7)\ndata1$LN8 = as.numeric(data1$LN8)\ndata1$LN9 = as.numeric(data1$LN9)\n\ndata1$CS1 = as.numeric(data1$CS1)\ndata1$CS2 = as.numeric(data1$CS2)\ndata1$CS3 = as.numeric(data1$CS3)\ndata1$CS4 = as.numeric(data1$CS4)\ndata1$CS5 = as.numeric(data1$CS5)\ndata1$CS6 = as.numeric(data1$CS6)\n\n\n#add column sum of cars in interval\ndata1$SUM<-rowSums(data1[,5:18])\n\n#unfinished preparation I will explain what I need\nsplitH<-str_split_fixed(data1$HEADINGS, \" \", 4)\nsplitH <- as.data.frame(splitH)\nsplitH <- unique(splitH)\ndata1$CHANNEL1 <- data1$CHANNEL\ncolnames(splitH) <- \"CHANNEL1\"\ncolnames(splitH)[2] <- \"CHANNEL2\"\ncolnames(splitH)[3] <- \"CHANNEL3\"\ncolnames(splitH)[4] <- \"CHANNEL4\"\nsplitH$rowNames <-row.names.data.frame(splitH)\n#replace.if\n\n# for (i in vector) {\n#   data1$CHANNEL<-gsub(\"1\", splitH[1,1], data1$CHANNEL)\n#   data1$CHANNEL<-gsub(\"2\", splitH[1,2], data1$CHANNEL)\n#   data1$CHANNEL<-gsub(\"3\", splitH[1,3], data1$CHANNEL)\n#   data1$CHANNEL<-gsub(\"4\", splitH[1,4], data1$CHANNEL)\n# }\n\n\ndata1$CHANNEL <- do.call(paste,c(data1[c(\"CHANNEL1\",\"CHANNEL\")],sep = \"_\"))\ndata1$CHANNEL = as.factor(data1$CHANNEL)\ndata1$Time = as.factor(data1$Time)\ndata1$CHANNEL1 <- NULL\n\n\n#===========================AGGREGATION==========================\n\nfilter<-filter(data1, CHANNEL == \"PP\",FILENAME == \"SC1_MEJA\")\n\ndf_XCV<-data1\nabc <- df_XCV$Date_Time\ndf_XCV<-select_if(df_XCV, is.numeric)\ndf_XCV$Date_Time<- abc\ndf_XCV<-df_XCV[,c(ncol(df_XCV),1:(ncol(df_XCV)-1))]\n#Create time series object\ndf_XCV_xts<-xts(df_XCV[, -1], order.by=as.POSIXct(df_XCV$Date_Time,tzone = Sys.getenv(\"TZ\")))\n\nep <- endpoints(df_XCV_xts, on = \"hours\")\npac<-period.apply(df_XCV_xts[,(names(df_XCV_xts)) ], INDEX = ep, FUN = mean)\n#Time series to DF\npac <-fortify(pac)\npac <-  select(pac, -c(PEAKINT, INTERVAL))\npac<-tk_augment_timeseries_signature(pac)\n#source(\"Aggregation_Date.R\")\n#source(\"Aggregation_Date_Time.R\")\n#===========================PLOTS==========================\n",
    "created" : 1522305696834.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3451874998",
    "id" : "48220012",
    "lastKnownWriteTime" : 1522317793,
    "last_content_update" : 1522317793775,
    "path" : "~/fiverr/Rshiny/global.R",
    "project_path" : "global.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}